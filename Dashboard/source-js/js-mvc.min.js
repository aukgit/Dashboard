Array.prototype.isEqual = function (array) {
    /// <summary>
    /// Returns bool based on if both array contains same items.
    /// </summary>
    /// <param name="array" type="type">Array list</param>
    /// <returns type="">Returns true/false based if both of those array are same or not. If not same then false. If both empty then also return true.</returns>
    "use strict";
    
    var isEmpty = this.length === 0;
    var arrayIsEmpty = array === undefined || array === null || array.length === 0;
    if (isEmpty === arrayIsEmpty && isEmpty === true) {
        return true;
    } else {
        if (this.length !== array.length) {
            return false;
        } else {
            // length is same , now loop through
            for (var i = 0; i < this.length; i++) {
                if (this[i] !== array[i]) {
                    return false;
                }
            }
            return true; // both arrays are same.
        }
    }
};

Array.prototype.getDifferentIndexes = function (array) {
    /// <summary>
    /// Returns array of indexes which are different between two arrays.
    /// </summary>
    /// <param name="array" type="type">Must pass same length array. Otherwise exception will be thrown.</param>
    /// <returns type="">Return an array of indexes  which are different between two arrays</returns>
    "use strict";
    var isEmpty = this.length === 0;
    var arrayIsEmpty = array === undefined || array === null || array.length === 0;
    if (isEmpty === arrayIsEmpty && isEmpty !== false) {
        return [];
    } else {
        var results = [];
        if (this.length !== array.length) {
            throw new Error("Array indexes are not same.");
        } else {
            // length is same , now loop through
            for (var i = 0; i < this.length; i++) {
                if (this[i] !== array[i]) {
                    results.push(i);
                }
            }
            return results; 
        }
    }
};
/// <reference path="libs/jQuery/jquery-2.2.3.js" />
/// <reference path="libs/jQuery/jquery-2.2.3.intellisense.js" />
/// <reference path="byId.js" />
/// <reference path="schema/schema.js" />
/// <reference path="schema/hashset.js" />
/// <reference path="schema/url.js" />
/// <reference path="extensions/constants.js" />
/// <reference path="extensions/selectors.js" />

/*
 * JavaScript Mvc framework.
 * Version                      : 2.0
 * Last Modified                : 19 Jun 2016  
 * 
 * Copyright (c) Md. Alim Ul Karim
 * Source Code Available at     : https://github.com/aukgit/JavaScript-MVC-Framework
 * Linkedin profile             : https://bd.linkedin.com/in/alimkarim
 * Facebook profile             : https://fb.com/alim.karim
 * Available under MIT license  : https://opensource.org/licenses/MIT
 * Facebook Page                : https://www.facebook.com/DevelopersOrganism
 * Mail to                      : info{at}developers-organism.com
 * Download                     : https://github.com/aukgit/JavaScript-MVC-Framework/archive/master.zip
 * 
 * JavaScript Mvc framework works with convention :
 * JavaScript Framework how it is implemented :  http://bit.ly/1KdWSHD | http://bit.ly/1KdX0qq 
 */


; $.app = $.app || {};
$.app = {
    isDebugging: true,
    getProcessForm: function () {
        /// <summary>
        /// Get the processing form.
        /// </summary>
        var app = $.app,
              selectors = app.selectors,
              ids = selectors.ids,
              $processForm = $.findCachedId(ids.processForm);

        return $processForm;
    }
};
/// <reference path="extensions/hiddenContainer.js" />
; $.app = $.app || {};
; $.app.config = {
    /**
     * app configuration settings.
     * Runs before initializing everything.
     * 
     */
    setup: function() {
        /// <summary>
        /// Setup all configuration.
        /// </summary>
        var app = $.app;
        var classesToCallInitialize = [
            app.hiddenContainer,
            app.spinner,
            $.jQueryCaching,
            $.app.component
        ];
        $.executeArrayOfInitilizeMethods(classesToCallInitialize);

        $.ajaxPrefilter(function (options, originalOptions, jqXHR) {
            options.async = true;
        });
    }
};
/// <reference path="byId.js" />
/// <reference path="app.global.js" />
; $.app = $.app || {};
/**
 * method which runs after all the initialization is done.
 */
$.app.executeAfter = {
    /**
     * method which runs after all the initialization is done.
     * @returns {} 
     */
    documentSpinnerHide: function () {
        $.app.global.documentFullSpinnerHide();
        var timer = setTimeout(function () {
            $.app.global.documentFullSpinnerHide();
            clearTimeout(timer);
        }, 2500);
    },
    /**
     * bind anchor click prevention 
     * @returns {} 
     */
    captureAnchorAndShowSpinner: function () {
        var $anchors = $.findCached("a:link");
        $anchors.click(function (e) {
            var $link = $(this),
                href = $link.attr("href");
            if (!$.isEmpty(href)) {
                var startsWith = href[0];
                var isInvalidUrl = href === "" || startsWith === "" || startsWith === "#" || href.indexOf("javascript") > -1;
                if (!isInvalidUrl) {
                    e.preventDefault();
                    $.app.global.documentFullSpinnerShow("...Please Wait...");
                    window.location = $link.attr("href");
                }
            }
        });
    },
    
};
/// <reference path="byId.js" />
/// <reference path="D:\Working (SSD)\GitHub\WereViewProject\WereViewApp\Content/Scripts/toastr.js" />
/// <reference path="D:\Working (SSD)\GitHub\WereViewProject\WereViewApp\Content/Scripts/jquery-2.1.4.js" />
/// <reference path="D:\Working (SSD)\GitHub\WereViewProject\WereViewApp\Content/Scripts/jquery.blockUI.js" />
/// <reference path="D:\Working (SSD)\GitHub\WereViewProject\WereViewApp\Content/Scripts/jquery-2.1.4.intellisense.js" />
; $.app = $.app || {};
/**
* runs all the methods after initialize method.
*/
$.app.executeBefore = {
    /**
     * runs all the methods after initialize method.
     */
    //toasterComponentSetup: function () {
    //    if (!$.isEmpty(toastr)) {
    //        toastr.options = {
    //            "closeButton": false,
    //            "debug": false,
    //            "newestOnTop": true,
    //            "progressBar": true,
    //            "positionClass": "toast-bottom-left",
    //            "preventDuplicates": true,
    //            "showDuration": "300",
    //            "hideDuration": "1000",
    //            "timeOut": "5000",
    //            "extendedTimeOut": "1000",
    //            "showEasing": "swing",
    //            "hideEasing": "linear",
    //            "showMethod": "fadeIn",
    //            "hideMethod": "fadeOut"
    //        }
    //    }
    //},
    //dynamicDependedCombo: function () {
    //    // load dynamic and depended select or combo
    //    var $selectPickers = $(".selectpicker");
    //    if ($selectPickers.length > 0) {
    //        $.devOrg.dynamicSelect.initialize();
    //        $selectPickers.selectpicker();
    //        $.devOrg.bootstrapComboSelectIndex($selectPickers, 0);
    //    }
    //},
    //elasticTextAreas: function () {
    //    var $textAreas = $("textarea");
    //    if ($textAreas.length > 0) {
    //        $textAreas.filter(".big-multiline").focus(function () {
    //            $(this).animate({ 'height': '300px', 'width': '630px', 'max-width': '630px' }, 400);
    //        }).blur(function () {
    //            $(this).animate({ 'height': 'auto', 'width': '294px', 'max-width': '294px' }, 400);
    //        });
    //        //making textarea's elastic
    //        $textAreas.elastic().trigger('update');
    //    }

    //},
    //toolTipShow: function () {
    //    var $tooltipItems = $('.tooltip-show');
    //    if ($tooltipItems.length > 0) {
    //        $tooltipItems.tooltip({ container: 'body' });
    //    }

    //},
    //seoHide: function () {
    //    var $seoHideItems = $(".seo-hide");
    //    if ($seoHideItems.length > 0) {
    //        $seoHideItems.hide();
    //    }
    //},
    //menuEnable: function () {
    //    $().jetmenu();
    //    var $menuPage = $("#menu-item-edit-page");
    //    if ($menuPage.length > 0) {
    //        var $div = $("#hasDropdownDiv"),
    //            $hasDropDown = $("#HasDropDown");
    //        $div.hide();
    //        $hasDropDown.click(function () {
    //            if (this.checked) {
    //                $div.show('slow');
    //            } else {
    //                $div.hide('slow');
    //            }
    //        });
    //    }
    //},
    //bootstrapTableComponentEnable: function () {
    //    var $tables = $(".bootstrap-table-do");
    //    if ($tables.length > 0) {
    //        $tables.bootstrapTable();
    //    }
    //},
    //datePickerComponentEnable: function () {
    //    var $dateTimePicker = $(".datetimepicker-start"),
    //        options = {
    //            pickDate: true, //en/disables the date picker
    //            pickTime: true, //en/disables the time picker
    //            useMinutes: true, //en/disables the minutes picker
    //            useSeconds: true, //en/disables the seconds picker
    //            useCurrent: true, //when true, picker will set the value to the current date/time     
    //            minuteStepping: 1, //set the minute stepping
    //            defaultDate: "", //sets a default date, accepts js dates, strings and moment objects
    //            disabledDates: [], //an array of dates that cannot be selected
    //            enabledDates: [], //an array of dates that can be selected
    //            sideBySide: true //show the date and time picker side by side
    //        };
    //    if ($dateTimePicker.length > 0) {
    //        $dateTimePicker.datetimepicker(options);
    //    }
    //    var $datePicker = $(".datepicker-start");
    //    if ($datePicker.length > 0) {
    //        options.pickTime = false;
    //        options.useMinutes = false;
    //        options.useSeconds = false;
    //        $datePicker.datetimepicker(options);
    //    }
    //},
    //transactionStatusEnable: function () {
    //    var $transaction = $("#transaction-container"),
    //        hideTimeOut = 0;
    //    if ($transaction.length !== 0) {
    //        if ($transaction.length > 0) {
    //            hideTimeOut = parseInt($($transaction[0]).attr("data-hide-duration"));
    //        }

    //        var hideStatus = function () {
    //            $transaction.each(function (index) {
    //                var $this = $(this);
    //                $this.attr("data-shown", "true")
    //                    .hide(500);
    //            });
    //        };
    //        var timer = setTimeout(hideStatus, hideTimeOut);

    //        var stopTimer = function () {
    //            clearTimeout(timer);
    //        }

    //        $transaction.click(function () {
    //            stopTimer();
    //            hideStatus();
    //        });
    //    }
    //},

  

    //ratingComponentEnable: function () {
    //    var $frontPageRatings = $.findCached(".rating-5-front");
    //    if ($frontPageRatings.length > 0) {
    //        $frontPageRatings.rating({
    //            showClear: false,
    //            showCaption: false
    //        });
    //    }

    //    var $detailPageRatingDisplayItems = $.findCached(".rating-5-page-details");
    //    if ($detailPageRatingDisplayItems.length > 0) {
    //        $detailPageRatingDisplayItems.rating({
    //            showClear: false,
    //            showCaption: true,
    //            starCaptions: {
    //                0: "0",
    //                0.5: "0.5",
    //                1: "1",
    //                1.5: "1.5",
    //                2: "2",
    //                2.5: "2.5",
    //                3: "3",
    //                3.5: "3.5",
    //                4: "4",
    //                4.5: "4.5",
    //                5: "5"
    //            },
    //            starCaptionClasses: {
    //                0: 'label label-danger',
    //                0.5: 'label label-danger',
    //                1: 'label label-danger',
    //                1.5: 'label label-warning',
    //                2: 'label label-warning',
    //                2.5: 'label label-info',
    //                3: 'label label-info',
    //                3.5: 'label label-primary',
    //                4: 'label label-primary',
    //                4.5: 'label label-success',
    //                5: 'label label-success'
    //            }
    //        });
    //    }
    //},
};
; $.app = $.app || {};
$.app.global = {
    /**
     * global methods collection 
     * execute methods as per necessary, 
     * ** these methods will NOT run automatically. **
     */
    prop: {

    },
    documentFullSpinnerHide: function () {
        var self = $.app.global,
            $bodyStart = $.findCachedId("body-start"),
            fixedClass = "body-fixed",
            flexible = "body-flexible";

        if ($bodyStart.length > 0) {
            if ($bodyStart.hasClass(fixedClass)) {
                var $loadingBar = $.findCachedId("loading-bar-full-screen");
                $bodyStart.removeClass(fixedClass).addClass(flexible);
                $loadingBar.addClass("animated").removeClass("fadeIn").addClass("fadeOut");
                setTimeout(function () {
                    $loadingBar.hide();
                    $bodyStart.removeClass(fixedClass).addClass(flexible);
                }, 1500);
            }
        }
    },
    enterToNextInputFocus: function ($form, submitAtLast, atLastFocusOnFirst) {
        /// <summary>
        /// Focus to next input if it was visible.
        /// </summary>
        /// <param name="$form" type="type"></param>
        /// <param name="submitAtLast" type="type"></param>
        /// <param name="atLastFocusOnFirst" type="type"></param>
        $form.find("input:text:first-child").focus();

        //var binders = formSelector + " input[type='text']:visible," +
        //    formSelector + " input[type='password']:visible," +
        //    formSelector + " input[type='numeric']:visible," +
        //    formSelector + " input[type='email']:visible," +
        //    //formSelector + " textarea:visible," +
        //    formSelector + " button.selectpicker[type='button']:visible," +
        //    formSelector + " select:visible";
        var binders = "input[type='text']:visible," +
                     "input[type='password']:visible," +
                     "input[type='numeric']:visible," +
                     "input[type='email']:visible," +
                    //formSelector + " textarea:visible," +
                     "button.selectpicker[type='button']:visible," +
                     "select:visible";
        $form.on("keypress", binders, function (e) {
            // var codeAbove = d.keyCode || d.which;
            // console.log("above code :" + codeAbove);
            var code = e.keyCode || e.which;
            // console.log("inside code :" + code);
            if (code === 13) { // Enter key
                e.preventDefault(); // Skip default behavior of the enter key
                var $elements = $form.find(binders);
                //console.log($elements);
                var n = $elements.length;
                var nextIndex = $elements.index(this) + 1;
                if (nextIndex < n) {
                    $elements[nextIndex].focus();
                } else {
                    $elements[nextIndex - 1].blur();
                    if (submitAtLast === true) {
                        $form.submit();
                    } else if (atLastFocusOnFirst === true) {
                        $elements[0].focus();
                    }
                }
            }
        });
    },
    enterToNextInputFocusWithoutTags: function ($form, submitAtLast, isDynamicSelector, atLastFocusOnFirst) {
        $form.find("input:text:first-child").focus();
        var binders = "input[type='text']:visible," +
                     "input[type='password']:visible," +
                     "input[type='numeric']:visible," +
                     "input[type='email']:visible," +
                     "input[type='text']:not(.bootstrap-tagsinput)," +
                    //formSelector + " textarea:visible," +
                     "button.selectpicker[type='button']:visible," +
                     "select:visible";
        var $elements = [];
        var keyPressEvent = function (e) {
            // var codeAbove = d.keyCode || d.which;
            // console.log("above code :" + codeAbove);
            var code = e.keyCode || e.which;
            // console.log("inside code :" + code);
            if (code === 13) { // Enter key
                e.preventDefault(); // Skip default behavior of the enter key
                if (isDynamicSelector === true || $elements.length === 0) {
                    $elements = $form.find(binders);
                }
                //console.log($elements);
                var n = $elements.length;
                var nextIndex = $elements.index(this) + 1;
                if (nextIndex < n) {
                    $elements[nextIndex].focus();
                } else {
                    $elements[nextIndex - 1].blur();
                    if (submitAtLast === true) {
                        $form.submit();
                    } else if (atLastFocusOnFirst === true) {
                        $elements[0].focus();
                    }
                }
            }
        };
        if (isDynamicSelector) {
            $form.on("keypress", binders, keyPressEvent);
        } else {
            var $inputs = $form.find(binders);
            $inputs.on('keypress', keyPressEvent);
        }
    },
    documentFullSpinnerShow: function (message) {
        var $bodyStart = $.findCachedId("body-start");
        var fixedClass = "body-fixed";
        var flexible = "body-flexible";
        if (!message) {
            message = "...Please wait...";
        }
        if ($bodyStart.length > 0) {
            var $content = $.findCachedId("full-screen-spinner-content");
            var $loadingBar = $.findCachedId("loading-bar-full-screen");
            $bodyStart.removeClass(flexible).addClass(fixedClass);
            $content.html(message);
            $loadingBar.addClass("animated").removeClass("fadeOut").addClass("fadeIn");
            $loadingBar.show();
        }
    },

    isGivenUrlMatchedDomain: function (url, domain) {
        var regex = new RegExp("^(?:https:\/\/|http:\/\/)*(www\.)*(?:" + domain + ")+(\/)?", "ig");
        var found = url.match(regex);
        return !$.isEmpty(found) && found.length === 1;
    }


};
/// <reference path="app.js" />
/// <reference path="byId.js" />
/// <reference path="jQueryExtend.js" />
/// <reference path="jQueryExtend.fn.js" />
/// <reference path="D:\Working (SSD)\GitHub\WereViewProject\WereViewApp\Content/Scripts/jquery-2.1.4.js" />

/**
 * Attach and initial method with the class and execute the method.
 * @param {} $object : attach a initial method to excute all the methods inside that class.
 * @param {} force : if force then it will attach the initial method and execute if exist or not.
 * @returns {} 
 */
$.attachInitialize = function ($object, force) {
    /// <summary>
    /// Attach a initializer method which will call all the other method except for initialize.
    /// </summary>
    /// <param name="$object" type="type">Json object</param>
    /// <param name="force" type="type">Force to add this new method.</param>
    var name = "initialize";

    var initMethod = function () {
        var self = $object;
        var keys = Object.keys(self);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (key !== name) {
                // execute all other than "initialize" method
                var functionsOrMethods = self[key];
                $.executeFunction(functionsOrMethods); // execute only if it is function.
            }
        }
    }
    if (!$.isEmpty($object)) {
        var initialize = $object[name];
        if (force === true) {
            $object[name] = initMethod;
        } else if ($.isEmpty(initialize)) {
            $object[name] = initMethod;
        }
    }
}

$.attachAndExecuteInitialize = function($object, force) {
    var name = "initialize";
    $.attachInitialize($object, force);
    $object[name].apply();
};

/**
 * Attach initialize methods to array of elements.
 * @param {} array of json classes
 * @param {} force 
 * @returns {} 
 */
$.attachInitializeToArray = function (array, force) {
    /// <summary>
    /// Attach a initializer method which will call all the other method except for initialize.
    /// </summary>
    /// <param name="$object" type="type">Json object</param>
    /// <param name="force" type="type">Force to add this new method.</param>\
    if (!$.isEmpty(array)) {
        for (var i = 0; i < array.length; i++) {
            var element = array[i];
            $.attachInitialize(element, force);
        }
    }

}

/**
 * Attach initialize methods to array of elements and then execute the initialize method.
 * @param {} array of json classes
 * @param {} force 
 * @returns {} 
 */
$.attachInitializeToArrayAndExecute = function (array, force) {
    /// <summary>
    /// Attach a initializer method which will call all the other method except for initialize.
    /// </summary>
    /// <param name="$object" type="type">Json object</param>
    /// <param name="force" type="type">Force to add this new method.</param>
    var name = "initialize";
    if (!$.isEmpty(array)) {
        for (var i = 0; i < array.length; i++) {
            var element = array[i];
            $.attachInitialize(element, force);
            element[name].apply();
        }
    }
}

/**
 * excute initialize methods from the array of elements.
 * @param {} array of json classes
 * @param {} force 
 * @returns {} 
 */
$.executeArrayOfInitilizeMethods = function (array) {
    /// <summary>
    /// Attach a initializer method which will call all the other method except for initialize.
    /// </summary>
    /// <param name="$object" type="type">Json object</param>
    /// <param name="force" type="type">Force to add this new method.</param>
    var name = "initialize";
    if (!$.isEmpty(array)) {
        for (var i = 0; i < array.length; i++) {
            var element = array[i];
            element[name].apply();
        }
    }
}

/**!
 * Written by Alim Ul Karim
 * Email: devorg.bd{at}gmail.com
 * Dated : 10 Jun 2015
 * Version : 1.0
 * Performance test against jQuery http://jsperf.com/jquery-vs-fasterjquery
 * @param {string} elementIdString 
 * @returns a jQuery object. 
 */
;$.byId = function (elementIdString) {
    /// <summary>
    /// Get your element by id, there is no need to use #.
    /// However if there is a hash then it will be removed.
    /// </summary>
    /// <param name="findElementById">Your element id, there is no need to use #</param>
    /// <returns>jQuery object , check length property to understand if any exist</returns>
    if (elementIdString !== undefined && elementIdString !== null && elementIdString !== "" && typeof elementIdString === 'string') {
        var elementsById;
        if (elementIdString.charAt(0) !== "#") {
            elementsById = document.getElementById(elementIdString);
            return $(elementsById);
        } else {
            var newId = elementIdString.slice(1, elementIdString.length);
            elementsById = document.getElementById(newId);
            return $(elementsById);
        }
    }
    return $(null);
}

/**
 * Only initialize components if it has "Component-Enable" named Hidden 
 */
; $.app.component = {
    id: "Component-Enable",
    /**
     * 
     * @returns {} 
     */
    initialize: function () {
        var self = $.app.component,
            id = self.id,
            listOfComponents = self.list, // list of components function resides inside the  component.list.js file.
            //load = self.load,
            $field = $.byId(id),
            extractComponentNameAndParameters = function (componentStringName) {
                /// <summary>
                /// extract component name and parameters
                /// </summary>
                /// <param name="componentStringName" type="type">component(param1,param2)</param>
                /// <returns type="">returns {name:"componentName", parameters: []}</returns>
                var result = {
                    name: "",
                    parameters: []
                };
                var parameterStartingIndex = componentStringName.indexOf("(");
                if (parameterStartingIndex === -1) {
                    // no parameters found
                    result.name = componentStringName;
                } else {
                    result.name = componentStringName.substr(0, parameterStartingIndex);
                    var len = componentStringName.length - parameterStartingIndex - 1 - 1; // -1 more for removing the last parentthesis
                    var paramsString = componentStringName.substr(parameterStartingIndex + 1, len);
                    result.parameters = paramsString.split(",");
                    for (var j = 0; j < result.parameters.length; j++) {
                        var param = result.parameters[j];
                        var captionFoundIndex = param.indexOf(":");
                        if (captionFoundIndex > - 1) {
                            // caption exist
                            len = param.length - 1 - captionFoundIndex;
                            // removing caption
                            result.parameters[j] = param.substr(captionFoundIndex + 1, len);
                        }
                    }
                }
                return result;
            };

        if ($field.length > 0) {
            // If separator is changed then must change the separator in the htmlhelper ComponentsEnableFor method.
            var seperator = "|";
            var loadingComponents = $field.val().split(seperator),
                executeFunction = $.executeFunction,
                executeFunctionWithArguments = $.executeFunctionWithArguments; // list of components to load.
            for (var i = 0; i < loadingComponents.length; i++) {
                var componentNameParam = loadingComponents[i];
                componentNameParam = extractComponentNameAndParameters(componentNameParam);
                var component = listOfComponents[componentNameParam.name];
                if (componentNameParam.parameters.length > 0) {
                    executeFunctionWithArguments(component, componentNameParam.parameters);
                } else {
                    executeFunction(component);
                }
            }
        }
    },
};
/// <reference path="../find-byId.js" />
/// <reference path="../jquery-2.1.4-vsdoc.js" />
/// <reference path="../application-js/jQueryExtend.js" />
/// <reference path="../application-js/app.initialize.js" />
/// <reference path="../application-js/app.js" />
/// <reference path="../application-js/app.run.js" />
/// <reference path="controllers.js" />
/// <reference path="../detect-browser.js" />
/// <reference path="initialize.js" />
/// <reference path="programsearch.js" />
//; $.app = $.app || {};
$.app.controllers = {
    // any thing related to controllers.
    isCurrentPage: function (controllerExtendedTypeObject) {
        /// <summary>
        /// Returns true/false if the page is executable or not.
        /// </summary>
        /// <param name="controllerExtendedTypeObject">Controller extended object , which must have pageId, $pageElement prop</param>
        /// <returns type=""></returns>
        var pageId = controllerExtendedTypeObject.pageId,
            $page = $.app.controllers.getPage(controllerExtendedTypeObject);
        controllerExtendedTypeObject.$pageElement = $.byId(pageId);
        $page = controllerExtendedTypeObject.$pageElement;
        return !$.isEmpty($page);
    },
    getPage: function (controllerExtendedTypeObject) {
        return controllerExtendedTypeObject.$pageElement;
    },
    getPageActionName: function (controllerExtendedTypeObject) {
        /// <summary>
        /// Get which mvc action it is referring to.
        /// </summary>
        /// <param name="controllerExtendedTypeObject"></param>
        /// <returns type="">String of name(i.e. Index, Edit etc... which set in the data-action attribute.)</returns>
        var $page = $.app.controllers.getPage(controllerExtendedTypeObject);
        if (!$.isEmpty($page)) {
            return $page.attr("data-action");
        }
        return "";
    },
    getPageBindings: function (controllerExtendedTypeObject) {
        /// <summary>
        /// Get binding events names
        /// </summary>
        /// <param name="controllerExtendedTypeObject"></param>
        /// <returns type="">String of name(i.e. Index, Edit etc... which set in the data-action attribute.)</returns>
        var $page = $.app.controllers.getPage(controllerExtendedTypeObject);
        if (!$.isEmpty($page)) {
            var value = $page.attr("data-event-binding");
            if (!$.isEmpty(value)) {
                return value;
            }
        }
        return "";
    },
    execute: function (controllerExtendedTypeObject, runAll) {
        /// <summary>
        /// execute all the actions if in the same page and page is related to that action.
        /// </summary>
        /// <param name="controllerExtendedTypeObject">Controller extended object , which must have actions array of methods.</param>
        /// <returns type=""></returns>
        var actions = controllerExtendedTypeObject.actions,
            actionNames = Object.keys(actions),
            pageAction = $.app.controllers.getPageActionName(controllerExtendedTypeObject),
            needToStop = runAll === false,
           isOneRan = false;

        for (var i = 0; i < actionNames.length; i++) {
            var actionName = actionNames[i],
                action = actions[actionName];
            if (actionName === pageAction) {
                if ($.executeFunction(action)) {
                    isOneRan = true;
                }
                if (needToStop === true) {
                    return true;
                }
            }
        }
        return isOneRan;
    }
}
$.app.hiddenContainer = {
    $hiddenContainer: null,
    $hiddenFieldDictionary: [],
    hiddenFieldNamesDictionary: [],
    initialize: function () {
        /// <summary>
        /// Initialize hidden container if exist.
        /// </summary>
        /// <returns type="">returns hidden container.</returns>
        var app = $.app.hiddenContainer;
        app.$hiddenContainer = $.byId("hidden-fields-container");
        app.$hiddenFieldDictionary = -1; // call GC to remove quickly.
        app.$hiddenFieldDictionary = [];
        app.hiddenFieldNamesDictionary = -1;// call GC to remove quickly.
        app.hiddenFieldNamesDictionary = []; 
        return app.$hiddenContainer;
    },
    isHiddenContainerExist: function () {
        return !$.isEmpty($.app.hiddenContainer.$hiddenContainer);
    },
    _getHiddenFieldDictionary: function (nameOfHiddenField) {
        /// <summary>
        /// Get dictionary hidden field values.
        /// </summary>
        /// <param name="nameOfHiddenField"></param>
        /// <returns type="return $ type object.">null or jquery obejct.</returns>
        var app = $.app.hiddenContainer;
        if (nameOfHiddenField) {
            var namesDictionary = app.hiddenFieldNamesDictionary;
            for (var i = 0; i < namesDictionary.length; i++) {
                var hiddenName = namesDictionary[i];
                if (hiddenName === nameOfHiddenField) {
                    return app.$hiddenFieldDictionary[i];
                }
            }
        }
        return null;
    },
    _addHiddenFieldToDictionary: function ($field) {
        /// <summary>
        /// Only adds the item to the dictionary ($hiddenFieldDictionary, hiddenFieldNamesDictionary)
        /// </summary>
        /// <param name="$field">jQuery object.</param>
        /// <returns type=""></returns>
        var app = $.app.hiddenContainer;
        app.$hiddenFieldDictionary.push($field);
        app.hiddenFieldNamesDictionary.push($field.attr("name"));
    },
    getHiddenField: function (nameOfHiddenField) {
        /// <summary>
        /// Get the hidden field value, if possible get it from dictionary object.
        /// Make sure that you put every hidden field inside #hidden-fields-container container
        /// </summary>
        /// <param name="nameOfHiddenField"></param>
        /// <returns type="return $ type object.">get attribute values $returnedObject.attr() or null</returns>
        var self = $.app.hiddenContainer;
        if (self.isHiddenContainerExist()) {
            var $container = self.$hiddenContainer,
                $field = self._getHiddenFieldDictionary(nameOfHiddenField);
            if ($field) {
                // not null
                return $field;
            } else {
                // is null the get id from DOM
                $field = $.byId(nameOfHiddenField);
                if ($field.length === 0) {
                    $field = $container.find("[name='" + nameOfHiddenField + "']");
                }
                self._addHiddenFieldToDictionary($field);
                return $field;
            }
        }
        return null;
    },
    setHiddenValue: function (nameOfHiddenField, val) {
        /// <summary>
        /// Get the hidden field value, if possible get it from dictionary object.
        /// Make sure that you put every hidden field inside #hidden-fields-container container
        /// </summary>
        /// <param name="nameOfHiddenField"></param>
        /// <returns type="return $ type object.">get attribute values $returnedObject.attr() or null</returns>
        var app = $.app.hiddenContainer;
        if (app.isHiddenContainerExist()) {
            var $field = app.getHiddenField(nameOfHiddenField);
            if ($field.length > 0) {
                $field.val(val);
                return $field;
            }
        }
        return null;
    }
}
/// <reference path="../app.executeBefore.js" />
/// <reference path="../app.executeAfter.js" />
/// <reference path="../attachInitialize.js" />

$.app.initilizeClasses = [
    $.app.executeBefore
];

$.app.initialize = function () {
    /// <summary>
    /// Run all modules.
    /// First runs config.setup() then all initialize methods in all the controllers.js. 
    /// Then run app.initializeMethods.initialize();
    /// </summary>

    var app = $.app;
    app.config.setup(); // runs all configuration before running all initialize methods.

    $.attachInitializeToArrayAndExecute(app.initilizeClasses);

    // run controller module
    app.controllers.initialize(); // runs all controllers modules.
};

$.app.initializeController = function (controllerCsv) {
    /// <summary>
    /// Run only the controller methods + initialize hidden container , spinner.
    /// First runs config.setup() then all initialize methods in all the controllers.js. 
    /// Then run app.initializeMethods.initialize();
    /// </summary>
    /// <param name="controllerCsv" type="string">controller name csv string.</param>

    var app = $.app;
    app.config.setup(); // runs all configuration before running all initialize methods.
    // run controller module
    app.controllers.initialize(controllerCsv); // run only specific controllers modules.
};

$.app.initializeControllerWithExcuteBeforeMethods = function (controllerCsv) {
    /// <summary>
    /// Run only the controller methods + initialize hidden container , spinner.
    /// First runs config.setup() then all initialize methods in all the controllers.js. 
    /// Then run app.initializeMethods.initialize();
    /// </summary>
    /// <param name="controllerCsv" type="string">controller name csv string.</param>

    var app = $.app;
    app.config.setup(); // runs all configuration before running all initialize methods.

    $.executeArrayOfInitilizeMethods(app.initilizeClasses);

    // run controller module
    app.controllers.initialize(controllerCsv); // run only specific controllers modules.
};
/// <reference path="urls.js" />
/// <reference path="constants.js" />
/// <reference path="country-phone.js" />
/// <reference path="devOrg.js" />
/// <reference path="initialize.js" />
/// <reference path="jQueryExtend.js" />
/// <reference path="jsonCombo.js" />
/// <reference path="regularExp.js" />
/// <reference path="selectors.js" />
/// <reference path="upload.js" />
/// <reference path="../../Content/Scripts/jquery-2.1.4.js" />
/// <reference path="../../Content/Scripts/jquery-2.1.4.intellisense.js" />
/// <reference path="../schema/url.js" />
/// <reference path="../schema/schema.js" />
/// <reference path="../jQueryExtend.fn.js" />
/// <reference path="../ProtoType/Array.js" />

$.app.inputChangeTracker = {
    list: {
        $inputs: null, // array
        initalTexts: null,  // array
        idsOrNames: null // array
    },

    createTracker: function ($inputs) {
        /// <summary>
        /// Creates a tracker to track input elements which are changed afterwards.
        /// </summary>
        /// <param name="$inputs" type="type"></param>
        var tracker = $.app.schema.createNestedClone($.app.inputChangeTracker);
        delete tracker.createTracker;
        var list = tracker.list;
        list.$inputs = $inputs;
        list.initalTexts = $inputs.toArrayWithValues();
        list.idsOrNames = tracker.getAllInputsIdsOrNameArray();
        return tracker;
    },
    isChanged: function ($input) {
        var item = this.getInputfromListWithInitialText($input);
        if (item !== null) {
            var currentText = item.$input.val();
            if (item.initText !== currentText) {
                return true;
            }
        }
        return false;
    },
    getInputfromListWithInitialText: function ($input) {
        var textArr = this.list.initalTexts,
            findingId = this.getInputIdOrName($input);
        for (var i = 0; i < textArr.length; i++) {
            var currentInputId = this.list.idsOrNames[i];
            if (findingId === currentInputId) {
                return {
                    $input: $input,
                    initText: textArr[i]
                }
            }
        }
        return null;
    },

    getInputIdOrName: function ($input) {
        var name;
        if (!$.isEmpty($input.length)) {
            name = $input.attr("id");
            if ($.isEmpty(name)) {
                name = $input.attr("name");
            }
            return name;
        } else {
            name = $input.id;
            if ($.isEmpty(name)) {
                name = $input.getAttribute("name");
            }
        }
        return name;
    },
    getInputIdOrNameByIndex: function (index) {
        return this.list.idsOrNames[index];
    },
    getChangedInputs: function () {
        /// <summary>
        /// Get all inputs array which are changed at moment of calling this method.
        /// </summary>
        /// <returns type=""></returns>
        var list = this.list,
            $inputs = this.list.$inputs,
            len = $inputs.length;
        var changedInputsList = [];
        for (var i = 0; i < len; i++) {
            var input = $inputs[i],
                currentText = input.value,
                previousValue = list.initalTexts[i];
            if (currentText !== previousValue) {
                // different 
                changedInputsList.push(input);
            }
        }
        return $(changedInputsList);
    },
    getUnchangedInputs: function () {
        /// <summary>
        /// Get all inputs array which are changed at moment of calling this method.
        /// </summary>
        /// <returns type=""></returns>
        var list = this.list,
            $inputs = this.list.$inputs,
            len = $inputs.length;
        var changedInputsList = [];
        for (var i = 0; i < len; i++) {
            var input = $inputs[i],
                currentText = input.value,
                previousValue = list.initalTexts[i];
            if (currentText === previousValue) {
                // different.
                changedInputsList.push(input);
            }
        }
        return $(changedInputsList);
    },
    getChangedInputsAttrArray: function (attr) {
        /// <summary>
        /// Get an array of the given attribute values for changed inputs.
        /// </summary>
        /// <param name="attr" type="type">Give a attr name.</param>
        /// <returns type="">Get an array of the given attribute values for changed inputs.</returns>
        var $changedInputs = this.getChangedInputs();
        var attrArray = new Array($changedInputs.length);
        for (var i = 0; i < $changedInputs.length; i++) {
            attrArray[i] = $changedInputs[i].getAttribute(attr);
        }
        return attrArray;
    },
    getUnchangedInputsAttrArray: function (attr) {
        /// <summary>
        /// Get an array of the given attribute values for changed inputs.
        /// </summary>
        /// <param name="attr" type="type">Give a attr name.</param>
        /// <returns type="">Get an array of the given attribute values for changed inputs.</returns>
        var $changedInputs = this.getUnchangedInputs();
        var attrArray = new Array($changedInputs.length);
        for (var i = 0; i < $changedInputs.length; i++) {
            attrArray[i] = $changedInputs[i].getAttribute(attr);
        }
        return attrArray;
    },
    getAllInputsIdsOrNameArray: function () {
        /// <summary>
        /// Get an array of the given attribute values for changed inputs.
        /// </summary>
        /// <param name="attr" type="type">Give a attr name.</param>
        /// <returns type="">Get an array of the given attribute values for changed inputs.</returns>
        var $inputs = this.list.$inputs;
        var attrArray = new Array($inputs.length);
        for (var i = 0; i < $inputs.length; i++) {
            var input = $inputs[i];
            var idOrName = input.id;
            if ($.isEmpty(idOrName)) {
                idOrName = input.getAttribute("name");
            }
            attrArray[i] = idOrName;
        }
        return attrArray;
    },
    setChangedInputsAttr: function (attr, value) {
        /// <summary>
        /// Set common attribute value to all the changed input elements.
        /// </summary>
        /// <param name="attr" type="type"></param>
        /// <param name="value" type="type"></param>
        var $changedInputs = this.getChangedInputs();
        for (var i = 0; i < $changedInputs.length; i++) {
            var input = $changedInputs[i];
            input.setAttribute(attr, value);
        }
    }
};
/// <reference path="devOrg.js" />
/// <reference path="initialize.js" />
/// <reference path="jQueryExtend.js" />
/// <reference path="jsonCombo.js" />
/// <reference path="regularExp.js" />
/// <reference path="selectors.js" />
/// <reference path="upload.js" />
/// <reference path="urls.js" />
/// <reference path="country-phone.js" />
/// <reference path="constants.js" />
/// <reference path="byId.js" />
/// <reference path="../jQuery/jquery-2.1.4.js" />
/// <reference path="../jQuery/jquery-2.1.4-vsdoc.js" />
;
$.fn.extend({
    getClassesList: function () {
        /// <summary>
        /// jQuery element get all classes as an array.
        /// </summary>
        /// <returns type="array">array list of classes.</returns>
        return $.getClassesList(this);
    },
    isEmpty: function () {
        /// <summary>
        /// Compare any object to null , unidentified or empty then returns true/false.
        /// </summary>
        /// <param name="variable"> Anything can be possible.</param>
        /// <returns type="boolean">True/False</returns>
        return $.isEmpty(this);
    },
    getSelectorElement: function () {
        /// <summary>
        /// get $(selector) element if data-selector attribute exists with the element.
        /// </summary>
        var selector = this.attr("data-selector");
        if ($.isEmpty(selector) === false) {
            //exist
            return $(selector);
        }
        return [];
    },
    getUrlString: function () {
        /// <summary>
        /// get attr("data-url") property.
        /// </summary>
        var url = this.attr("data-url");
        if ($.isEmpty(url) === false) {
            //exist
            return url;
        }
        return "";
    },
    getReferenceIdElement: function () {
        /// <summary>
        /// get $("#id") element if data-ref-id attribute exists.
        /// </summary>
        var id = this.attr("data-ref-id");
        if ($.isEmpty(id) === false) {
            //exist
            return $.byId(id);
        }
        return [];
    },
    disableElement: function () {
        this.attr("disabled", "disabled");
    },
    enableElement: function () {
        this.removeAttr("disabled");
    },
    isDisabledElement: function () {
        return this.hasAttr("disabled");
    },
    toArrayWithValues: function () {
        var len = this.length,
            array = new Array(len);
        for (var i = 0; i < len; i++) {
            array[i] = this[i].value;
        }
        return array;
    },
    multiformSerialize: function () {
        var len = this.length,
            array = [];
        for (var i = 0; i < len; i++) {
            var $from = $(this[i]);
            array.push($.serializeToJson($from));
        }
        return array;
    },
    toggleClasses: function (classes) {
        /// <summary>
        /// toggle classes from the given $element, order doesn't matter..
        /// </summary>
        /// <param name="$element" type="type">jquery element</param>
        /// <param name="classes" type="type">Use spaces( ) to combine and give classes names.</param>
        if (this.length > 0) {
            var classList = classes.split(" ");
            for (var i = 0; i < classList.length; i++) {
                var _class = classList[i];
                this.toggleClass(_class);
            }
        }
    },

    anyClassesExist: function (classes) {
        /// <summary>
        /// toggle classes from the given $element, order doesn't matter..
        /// </summary>
        /// <param name="$element" type="type">jquery element</param>
        /// <param name="classes" type="type">Use spaces( ) to combine and give classes names.</param>
        if (this.length > 0) {
            var classList = classes.split(" ");
            for (var i = 0; i < classList.length; i++) {
                var cssClass = classList[i];
                if (this.hasClass(cssClass)) {
                    return true;
                }
            }
        }
        return false;
    },

    allClassesExist: function (classes) {
        /// <summary>
        /// toggle classes from the given $element, order doesn't matter..
        /// </summary>
        /// <param name="$element" type="type">jquery element</param>
        /// <param name="classes" type="type">Use spaces( ) to combine and give classes names.</param>
        var result = false;
        if (this.length > 0) {
            result = true;
            var classList = classes.split(" ");
            for (var i = 0; i < classList.length; i++) {
                var cssClass = classList[i];
                if (!this.hasClass(cssClass)) {
                    result = false;
                }
            }
        }
        return result;
    },
    toggleAttrValue: function (attr) {
        /// <summary>
        /// toggle given attribute value to "true" => "false" or "false" => "true".
        /// If not present then default insert true.
        /// </summary>
        /// <param name="attr" type="type">attribute name</param>
        if (this.length > 0) {
            var val = this.attr(attr);
            if (val === "true") {
                this.attr(attr, "false");
            } else {
                this.attr(attr, "true");
            }
        }
    },
    isBoolAttr: function (attr) {
        /// <summary>
        /// checks if the given attribute value is not "false".
        /// If attr not present then true.
        /// If no element present then false.
        /// </summary>
        /// <param name="attr" type="type">attribute name</param>
        if (this.length > 0) {
            var val = this.attr(attr);
            return val !== "false";
        }
        return false;
    },
    setBoolTrueAttr: function (attr) {
        /// <summary>
        /// checks if the given attribute value is "false".
        /// If attr not present then true.
        /// </summary>
        /// <param name="attr" type="type">attribute name</param>
        if (this.length > 0) {
            this.attr(attr, "true");
        }
    },
    setBoolFalseAttr: function (attr) {
        /// <summary>
        /// checks if the given attribute value is "false".
        /// If attr not present then true.
        /// </summary>
        /// <param name="attr" type="type">attribute name</param>
        if (this.length > 0) {
            this.attr(attr, "false");
        }
    }
});
/// <reference path="devOrg.js" />
/// <reference path="initialize.js" />
/// <reference path="jQueryExtend.js" />
/// <reference path="jsonCombo.js" />
/// <reference path="regularExp.js" />
/// <reference path="selectors.js" />
/// <reference path="upload.js" />
/// <reference path="urls.js" />
/// <reference path="country-phone.js" />
/// <reference path="constants.js" />
/// <reference path="byId.js" />
/// <reference path="../jQuery/jquery-2.1.4.js" />
/// <reference path="../jQuery/jquery-2.1.4-vsdoc.js" />
;

$.isEmpty = function (variable) {
    /// <summary>
    /// Compare any object to null , unidentified or empty then returns true/false.
    /// </summary>
    /// <param name="variable"> Anything can be possible.</param>
    /// <returns type="boolean">True/False</returns>
    return variable === undefined || variable === null || variable === '' || variable.length === 0;
};
/**
 * Set default value if the given variable is empty or not provided.
 * @param {} variable 
 * @param {} defaultValue 
 * @returns {} 
 */
$.setDefaultOnEmpty = function (variable, defaultValue) {
    /// <summary>
    /// Compare any object to null , unidentified or empty then sets the default value to that object and then returns
    /// </summary>
    /// <param name="variable"> Anything can be possible.</param>
    /// <returns type="boolean">True/False</returns>
    if (variable === undefined || variable === null || variable === '' || variable.length === 0) {
        variable = defaultValue;
    }
    return variable;
};
/**
 * Set default value if the given variable is empty or not provided.
 * @param {} variable 
 * @param {} defaultValue 
 * @returns {} 
 */
$.setDefaultBoolOnEmpty = function (variable, defaultValue) {
    /// <summary>
    /// Compare any object to null , unidentified or empty then sets the default value to that object and then returns
    /// </summary>
    /// <param name="variable"> Anything can be possible.</param>
    /// <returns type="boolean">True/False</returns>
    if (variable === undefined || variable === null || variable === '' || variable.length === 0) {
        variable = defaultValue;
    }
    return variable === "true" || variable === true;
};
/**
 * gets the common classes from the list.
 * @param {} classesWithSpace1 : classes with spaces eg. "Hello world"
 * @param {} classesWithSpace2  : classes with spaces eg "world Hello v"
 * @returns {} return a array list of common classes eg. ["Hello",  "world"]
 */
$.getCommonClasses = function (classesWithSpace1, classesWithSpace2) {
    var list1 = classesWithSpace1.split(" "),
        list2 = classesWithSpace2.split(" "),
        common = [];
    var len = list1.length > list2.length ? list1.length : list2.length;
    var workingList = list1.length > list2.length ? list1 : list2;
    var otherList = list1.length > list2.length ? list2 : list1;

    for (var i = 0; i < len; i++) {
        var item = workingList[i];
        if (otherList.indexof(item) > -1) {
            // present as common
            common.push(item);
        }
    }
    return common;
}


/**
 * gets the uncommon classes from the list.
 * @param {} classesWithSpace1 : classes with spaces eg. "Hello world"
 * @param {} classesWithSpace2  : classes with spaces eg "world Hello v"
 * @returns {} return a array list of common classes eg. ["v"]
 */
$.getUnCommonClasses = function (classesWithSpace1, classesWithSpace2) {
    var list1 = classesWithSpace1.split(" "),
        list2 = classesWithSpace2.split(" "),
        unCommon = [];
    var len = list1.length > list2.length ? list1.length : list2.length;
    var workingList = list1.length > list2.length ? list1 : list2;
    var otherList = list1.length > list2.length ? list2 : list1;

    for (var i = 0; i < len; i++) {
        var item = workingList[i];
        if (otherList.indexof(item) === -1) {
            // not present uncommon
            unCommon.push(item);
        }
        item = otherList.length < i ? otherList[i] : null;
        if (item !== null && workingList.indexof(item) === -1) {
            // not present uncommon
            unCommon.push(item);
        }
    }
    return unCommon;
}
/**
 *  @returns array of classes names.
 */
$.getClassesList = function ($jQueryObject) {
    /// <summary>
    /// jQuery element get all classes as an array.
    /// </summary>
    /// <param name="$jQueryObject">Any jQuery object.</param>
    /// <returns type="array">array list of classes.</returns>
    if ($jQueryObject.length === 1) {
        return $jQueryObject.attr("class").split(/\s+/);
    }
    return null;
};

$.getArrayExcept = function (givenArray, excludingArray) {
    /// <summary>
    /// givenArray = ['a','b','c'] , excludingArray=['b','c'], results=['a']
    /// </summary>
    /// <param name="givenArray" type="array">Full list of items (in array format).</param>
    /// <param name="excludingArray" type="array">List of items which needs to be excluded from the list (in array format).</param>
    /// <returns type="array">an array after excluding the items from the given list.</returns>
    "use strict";
    if ($.isEmpty(givenArray)) {
        return [];
    }
    if ($.isEmpty(excludingArray)) {
        return givenArray;
    }

    var len = givenArray.length;
    var results = [];
    for (var i = 0; i < len; i++) {
        if (excludingArray.indexOf(givenArray[i]) === -1) {
            // not found
            results.push(givenArray[i]);
        }
    }
    return results;
};


$.isString = function (variable) {
    /// <summary>
    /// Checks wheater it is a string type or not.
    /// </summary>
    /// <param name="variable"></param>
    /// <returns type="boolean">true/false</returns>
    return typeof variable === 'string';
};

$.returnUrlWithSlash = function (url) {
    /// <summary>
    /// First checks if slash exist at the bottom or not.
    /// </summary>
    /// <param name="url" type="string">Give an url.</param>
    /// <returns type="string">Url with slash at the bottom or empty string if type doesn't match or null or undefined.</returns>
    if ($.isEmpty(url) === false && $.isString(url)) {
        var len = url.length;
        if (url[len - 1] !== '/') {
            url += "/";
            return url;
        }
    }
    return "";
};
$.getFriendlyUrlSlug = function (str) {
    /// <summary>
    /// Returns friendly url slug from given string
    /// Hello & World -> hello-world
    /// </summary>
    /// <param name="str">Give an string "Hello & World"</param>

    var regularExpressions = $.app.regularExp;
    if ($.isEmpty(str) === false) {
        //"[^A-Za-z0-9_\.~]+"
        var regexString = regularExpressions.friendlyUrl;
        str = str.trim();
        var regExp = new RegExp(regexString, 'gi');
        return str.replace(regExp, "-");
    }
    return "";
};
/**
 * single input IFRAME code HTML  to Square
 */
$.htmlToSquareTag = function ($jQueryInputText) {
    /// <summary>
    /// Any HTML tag to square tag inside the input text.
    /// <iframe width="560" height="315" src="//www.youtube.com/embed/ob-P2a6Mrjs" frameborder="0" allowfullscreen> to Square
    /// </summary>
    /// <param name="$jQueryInput">jQuery element.</param>
    var currentText = $jQueryInputText.val();
    //currentText = currentText.toLowerCase();
    var reg = new RegExp("<" + tag, 'gi');
    currentText = currentText.replace(reg, "[" + tag);
    reg = new RegExp("</" + tag + ">", 'gi');
    currentText = currentText.replace(reg, "[/" + tag + "]");
    currentText = currentText.replace(">", "]");
    $jQueryInputText.val(currentText);
};

/**
 * single input IFRAME code Square  to HTML
 */
$.squareToHtmlTag = function ($jQueryInput, tag) {
    /// <summary>
    /// Any square tag to html tag inside the input text.
    /// [iframe width="560" height="315" src="//www.youtube.com/embed/ob-P2a6Mrjs" frameborder="0" allowfullscreen] to html
    /// </summary>
    /// <param name="$jQueryInput">jQuery element.</param>
    var currentText = $jQueryInput.val();
    //currentText = currentText.toLowerCase();
    var reg = new RegExp("\\[" + tag, 'gi');
    currentText = currentText.replace(reg, "<" + tag);
    reg = new RegExp("\\[/" + tag + "\\]", 'gi');
    currentText = currentText.replace(reg, "</" + tag + ">");
    currentText = currentText.replace("]", ">");
    $jQueryInput.val(currentText);
};
//validation modification
$.checkValidInputs = function ($inputsCollection, starRatingLabel, invalidStarRatingCss) {
    /// <summary>
    /// Check all the inputs jQuery validations.
    /// Also mark to red when invalid by the default valid method. 
    /// Bootstrap star rating is also validated in custom way.
    /// </summary>
    /// <param name="$inputsCollection" type="jQuery element">All input collection. </param>
    /// <param name="starRatingLabel">Can be null or full html for the label to be injected when star rating is not selected or rated.</param>
    /// <param name="invalidStarRatingCss" type="json with css properties">When null: {'text-shadow': "2px 2px red"}</param>
    /// <returns type="boolean">true/false</returns>
    "use strict";

    var $currentInput = null;
    var length = $inputsCollection.length;
    var labelHtml = starRatingLabel;
    if ($.isEmpty(labelHtml)) {
        labelHtml = "<label class='label label-danger small-font-size'>Please rate first.</label>";
    }

    if ($.isEmpty(invalidStarRatingCss)) {
        invalidStarRatingCss = {
            'text-shadow': "2px 2px red"
        };
    }
    if (length > 0) {
        for (var i = 0; i < length; i++) {
            $currentInput = $($inputsCollection[i]);

            if ($currentInput.hasClass("common-rating")) {
                var $ratingContainer = $currentInput.closest(".rating-container");
                var $wholeContainer = $ratingContainer.closest(".star-rating");

                if ($currentInput.val() === "0") {
                    $ratingContainer.css(invalidStarRatingCss);
                    if (!$wholeContainer.attr("data-warned")) {
                        $wholeContainer.append(labelHtml);
                        $wholeContainer.attr("data-warned", "true");
                    }
                    return false;
                } else {
                    // when star rating is valid then 
                    // remove the injected label and make it normal
                    $ratingContainer.css({
                        'text-shadow': "none"
                    });

                    if ($wholeContainer.attr("data-warned")) {
                        // removing injected label.
                        $wholeContainer.find("label").remove();
                        $wholeContainer.attr("data-warned", "false");
                    }
                }
            }
            if (!$currentInput.valid()) {
                return false;
            }
        }
    }
    return true;
};

$.isJson = function (obj) {
    if (!$.isEmpty(obj) && !$.isArray(obj) && typeof obj !== 'string' && typeof obj !== 'function') {
        return Object.keys(obj).length > 0;
    }
    return false;
};
$.getHiddenField = function (name) {
    /// <summary>
    /// Get hidden field object from cache if possible.
    /// </summary>
    /// <param name="name">Name of the field</param>
    /// <returns type=""></returns>
    return $.app.hiddenContainer.getHiddenField(name);
};

$.getHiddenValue = function (name) {
    /// <summary>
    /// Get string value of the hidden field.
    /// </summary>
    /// <param name="name">Name of the field</param>
    /// <returns type="">Get string value of the hidden field. If not found then empty string "".</returns>
    var $field = $.app.hiddenContainer.getHiddenField(name);
    if (!$.isEmpty($field)) {
        return $field.val();
    }
    return "";
};

$.setHiddenValue = function (name, val) {
    /// <summary>
    /// Get string value of the hidden field.
    /// </summary>
    /// <param name="name">Name of the field</param>
    /// <param name="val">value of the field</param>
    /// <returns type="">Get string value of the hidden field. If not found then empty string "".</returns>
    return $.app.hiddenContainer.setHiddenValue(name, val);
};


$.isFunc = function (func) {
    /// <summary>
    /// Is it it a function.
    /// </summary>
    /// <param name="func">Anything</param>
    /// <returns type="">Returns true/false</returns>
    return typeof func === "function";
};
$.executeFunction = function (func) {
    /// <summary>
    /// Execute only if it is a function
    /// </summary>
    /// <param name="func">Anything</param>
    /// <returns type="">Returns true/false</returns>
    if (typeof func === "function") {
        func.apply();
        return true;
    }
    return false;
};

$.executeFunctionWithArguments = function (func, argumentsArray) {
    /// <summary>
    /// Execute only if it is a function.
    /// Catch the arguments with arguments variable inside the function.
    /// </summary>
    /// <param name="func">Anything</param>
    /// <param name="argumentsArray">Pass an array of arguments.</param>
    /// <returns type="">Returns true/false</returns>
    if (typeof func === "function") {
        func.apply(null, argumentsArray);
        return true;
    }
    return false;
};


$.getJsonToQueryString = function (url, json, isQuestionMarkRequired) {
    /// <summary>
    /// Returns a concatenated url with those json array value pair
    /// </summary>
    /// <param name="url"></param>
    /// <param name="json">
    ///    any json  {name: 'value', name2: 'value' },
    /// </param>
    /// <param name="isQuestionMarkRequired">add ? after given url or else add &</param>
    /// <returns type="">returns a url string.</returns>
    if (url !== null && url !== undefined) {
        if (isQuestionMarkRequired) {
            url += "?";
        } else {
            url += "&";
        }
        var keys = Object.keys(json),
            len = keys.length,
            arr = new Array(len);
        for (var i = 0; i < len; i++) {
            var key = keys[i],
                value = json[key];
            arr[i] = key + "=" + value + "";
        }
        url += arr.join("&");
        return url;
    }

    return "";
};

$.applyAutoResizeMultiline = function ($container) {
    /// <summary>
    /// Apply auto size on the elements which has elastic or autosize-enabled class.
    /// </summary>
    /// <param name="$container">can be null, if given the filter will be done only inside that container.</param>
    /// <returns type=""></returns>

    var $autoSizableElements;
    var selectors = ".elastic,.autosize,.multiline-text";
    if (!$.isEmpty($container)) {
        $autoSizableElements = $container.find(selectors);
    } else {
        $autoSizableElements = $(selectors);
    }
    if (!$.isEmpty($autoSizableElements)) {
        $autoSizableElements.elastic();
    }
};
$.hideEmptyFields = function ($container) {
    /// <summary>
    /// Hide elements which has empty input fields.
    /// </summary>
    /// <param name="$container">can be null, if given the filter will be done only inside that container.</param>
    /// <returns type=""></returns>

    var $inputs;
    var selectors = "input[value='']";
    var $formGroups;
    if (!$.isEmpty($container)) {
        $inputs = $container.find(selectors);
        $formGroups = $container.find(".form-group");
    } else {
        $inputs = $(selectors);
        $formGroups = $(".form-group");
    }
    if (!$.isEmpty($inputs)) {
        for (var i = 0; i < $inputs.length; i++) {
            var $input = $($inputs[i]),
                name = $input.attr("data-prop"),
                selector = "[data-prop='" + name + "']",
                $formGroup = $formGroups.filter(selector);
            $formGroup.hide();
            //console.log($formGroup);
            //console.log(selector);
            //console.log(name);
        }
    }
};

/**
 *  
 * @param {} arrayOfSelectors  : Pass array of selectors
 * @returns {} jquery elements
 */
$.getjQueryElementsByArrayOfSelectors = function (arrayOfSelectors) {
    /// <summary>
    /// Get jquery elements by passing array of selectors.
    /// </summary>
    /// <param name="arrayOfSelectors" type="type"></param>
    /// <returns type=""></returns>
    var results = [];
    for (var i = 0; i < arrayOfSelectors.length; i++) {
        var selector = arrayOfSelectors[i];
        var $elems = $(selector);
        for (var j = 0; j < $elems.length; j++) {
            var elem = $elems[i];
            results.push(elem);
        }
    }
    return $(results);
}

/**
 * Convert single form to json object.
 * @param {} $singleForm 
 * @returns {} 
 */
$.serializeToJson = function ($singleForm) {
    var result = {};
    var formItemsArray = $singleForm.serializeArray();
    for (var i = 0; i < formItemsArray.length; i++) {
        var item = formItemsArray[i];
        result[item.name] = item.value;
    }
    return result;
}
;$.app = $.app || {};
;$.app.schema = {
    create: function (schema) {
        /// <summary>
        /// (non-nested faster) create deep copy of the schema 
        /// </summary>
        /// <param name="schema" type="type">Give a schema type from the schema folder.</param>
        return $.nonNestedClone(schema);
    },
    createNestedClone: function (schema) {
        /// <summary>
        /// (nested , a little bit slower) create deep copy of the schema  
        /// </summary>
        /// <param name="schema" type="type">Give a schema type from the schema folder.</param>
        return $.nestedClone(schema);
    }
};
; $.app = $.app || {};
$.app.service = {

};
/// <reference path="../jQueryExtend.fn.js" />
/// <reference path="../jquery-2.1.4.js" />
/// <reference path="../byId.js" />
/// <reference path="../jquery-2.1.4.intellisense.js" />
;$.app.spinner = {
    id: 'loading-bar',
    $spinner: [],
    spinnerDisplayTypeId: 1,
    type: {
        HtmlTemplate: 1, // renders spinner from Html element
        JsTemplate: 2 // render Html by generating Html from JavaScript.
    },
    prop: {
        spinnerClass: "fa-spin-custom fa-spinner",
        spinnerVisibleAttr: "data-is-spinner-visible"
    },
    initialize: function () {
        var self = $.app.spinner;
        self.$spinner = $.byId(self.id);
        if (!$.isFunc($.blockUI)) {
            throw new Error("Spinner requires jQueryUI Block + Animate.css library. Please download and add those to your project.");
        }
    },
    setMessage: function (contentMessage) {
        /// <summary>
        /// Set message on spinner
        /// </summary>
        /// <param name="tooltipMessage">tooltipMessage message</param>
        /// <param name="contentMessage">content message</param>
        var self = $.app.spinner,
            $loadingbar = self.get(),
            $content = $loadingbar.find(".spinner-content");


        if ($.isEmpty(contentMessage)) {
            contentMessage = "Please wait!";
        }

        if ($.isEmpty(contentMessage) === false) {
            $content.attr("title", contentMessage)
                .html(contentMessage);
        } else {
            $content.attr("title", "")
                .html("");
        }
    },
    quickShow: function ($blockingElement, $elementToHide, onBlockExecuteMethod) {
        /// <summary>
        /// Show a spiner with default messages.
        /// </summary>
        /// <param name="$blockingElement" type="type">Element which to block.</param>
        /// <param name="$elementToHide" type="type">Element which to hide during the display of the spinner.</param>
        /// <param name="onBlockExecuteMethod" type="type">An event to execute when the element is blocked.</param>
        var self = $.app.spinner;
        self.show(null, $blockingElement, $elementToHide, onBlockExecuteMethod);
    },
    show: function (message, $blockingElement, $elementToHide, onBlockExecuteMethod) {
        /// <summary>
        /// show spinner and block UI
        /// </summary>
        /// <param name="message" type="type">
        /// set message to the loading spinner.
        /// </param>
        /// <param name="$blockingElement" type="type">
        /// If any $element is given then UI will only be blocked $element. If none given then whole screen will be blocked.
        /// </param>
        /// <param name="$elementToHide" type="type">
        /// If any $elementToHide is given then this element will be hidden when the UI is blocked.
        /// </param>
        var self = $.app.spinner,
            $spinner = self.get();
        self.setMessage(message);

        if (!$.isEmpty($elementToHide)) {
            $elementToHide.hide();
        }
        var options = {
            message: $spinner,
            onBlock: onBlockExecuteMethod
        };
        if (!$.isEmpty($blockingElement)) {
            $blockingElement.block(options);
        } else {
            // block whole screen
            $.blockUI(options);
        }
    },

    hide: function ($unBlockingElement, $elementToDisplay) {
        /// <summary>
        /// hide spinner and unblock the UI
        /// </summary>
        /// <param name="$unBlockingElement" type="type"></param>
        /// <param name="$elementToDisplay" type="type"></param>
        var self = $.app.spinner;
        if (!$.isEmpty($unBlockingElement)) {
            $unBlockingElement.unblock();
        } else {
            // unblock whole screen
            $.unblockUI();
        }
        if (!$.isEmpty($elementToDisplay)) {
            $elementToDisplay.show("slow");
        }
    },


    get: function () {
        /// <summary>
        /// Get the spinner element.
        /// </summary>
        /// <returns type="">Returns $.app.spinner.$spinner</returns>
        return $.app.spinner.$spinner;
    },

    toogleSpinnerClass: function ($e, newClasses, hideOnSpinnerOnSpinnerClassesRemoved) {
        /// <summary>
        /// Toggle spinner classes on the given $element.
        /// </summary>
        /// <param name="$e" type="type">Element to toggle hide.</param>
        /// <param name="newClasses" type="type">use spaces for multiple classes</param>
        /// <param name="hideOnSpinnerOnSpinnerClassesRemoved" type="type">true/false if the spinner element should hide when removing the spinner classes.</param>
        var self = $.app.spinner,
            prop = self.prop,
            spinnerClass = prop.spinnerClass;
        if ($e.length > 0) {
            if (!$e.hasClass("fa")) {
                spinnerClass += " fa";
            }
            if (hideOnSpinnerOnSpinnerClassesRemoved === true) {
                $e.toggleClass("hide");
            }
            $e.toggleClasses(spinnerClass);
            $e.toggleClasses(newClasses);
        }
    },
    isSpinnerVisibleAt: function ($btn) {
        if ($btn.length > 0) {
            var self = $.app.spinner,
                prop = self.prop,
                attr = prop.spinnerVisibleAttr;
            return $btn.isBoolAttr(attr);
        }
        return false;
    },
    toggleSpinnerWithBtnPlusUIBlock: function ($btn, $currentIcon, $blockingUI, message, onCompleteFunction, spinnerClasses, nonSpinnerClasses, commonClass, right, hideOnSpinnerOnSpinnerClassesRemoved) {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="$btn" type="type">Where to add the spinner.</param>
        /// <param name="$currentIcon" type="type">$ element if any icon present in the btn. This element will be hidden when spinner css is added.</param>
        /// <param name="spinnerClasses" type="type">custom spinner classes. if not given default one will be set : fa-spin-custom fa-spinner</param>
        /// <param name="nonSpinnerClasses" type="type">custom classes to be displayed when spinner is disabled. If not given nothing will happen. if given then it will be added with the i.spinner when by toggling</param>
        /// <param name="right" type="type">if place in right or left. by default left.</param>
        /// <param name="hideOnSpinnerOnSpinnerClassesRemoved" type="type">Hide the spinner icon when toggled. If true then when spinner class is removed this spinner icon object will be hidden and nonSpinnerClasses will have no effect on the system.</param>
        /// <param name="$blockingUI" type="type">Blocking ui</param>
        /// <param name="message" type="type">Message to display when blocks the ui</param>
        /// <param name="onCompleteFunction" type="type">onCompletetion function.</param>
        var self = $.app.spinner;
        var isSpinnerVisible = self.toggleSpinnerWithBtn($btn, $currentIcon, spinnerClasses, nonSpinnerClasses, commonClass, right, hideOnSpinnerOnSpinnerClassesRemoved);
        if (isSpinnerVisible === true) {
            self.show(message, $blockingUI, null, onCompleteFunction);
        } else {
            self.hide($blockingUI, null);
        }
    },
    toggleSpinnerWithBtn: function ($btn, $currentIcon, spinnerClasses, nonSpinnerClasses, commonClass, right, hideOnSpinnerOnSpinnerClassesRemoved) {
        /// <summary>
        /// Attach spinner icon inside a button or anchor or any div tag.
        /// </summary>
        /// <param name="$btn" type="type">Where to add the spinner.</param>
        /// <param name="$currentIcon" type="type">$ element if any icon present in the btn. This element will be hidden when spinner css is added.</param>
        /// <param name="spinnerClasses" type="type">custom spinner classes. if not given default one will be set : fa-spin-custom fa-spinner</param>
        /// <param name="nonSpinnerClasses" type="type">custom classes to be displayed when spinner is disabled. If not given nothing will happen. if given then it will be added with the i.spinner when by toggling</param>
        /// <param name="right" type="type">if place in right or left. by default left.</param>
        /// <param name="hideOnSpinnerOnSpinnerClassesRemoved" type="type">Hide the spinner icon when toggled. If true then when spinner class is removed this spinner icon object will be hidden and nonSpinnerClasses will have no effect on the system.</param>
        if ($btn !== undefined && $btn.length > 0) {
            var $spinner,
                self = $.app.spinner,
                prop = self.prop,
                attr = prop.spinnerVisibleAttr,
                spinnerClass = prop.spinnerClass;
            if ($.isEmpty(spinnerClasses)) {
                if (!$btn.hasClass("fa")) {
                    spinnerClass += " fa";
                }
                spinnerClasses = spinnerClass;
            }

            if (!$.isEmpty($btn.$attachtedSpinner)) {
                $spinner = $btn.$attachtedSpinner;
                if (hideOnSpinnerOnSpinnerClassesRemoved === true) {
                    $spinner.toggleClass("hide");
                }
                var currentlySpinnerDisplaying = $btn.isBoolAttr(attr);
                $spinner.toggleClasses(spinnerClasses); // toggle spinner visible/invisible classes.
                if (currentlySpinnerDisplaying) {
                    // currently spinner is visible , now make it invisible.
                    $btn.setBoolFalseAttr(attr);
                } else {
                    // currently spinner is not visible, make it visible.
                    $btn.setBoolTrueAttr(attr);
                }
                if (!$.isEmpty(nonSpinnerClasses)) {
                    $spinner.toggleClasses(nonSpinnerClasses);
                }
            } else {
                // creating the spinner
                commonClass = $.setDefaultOnEmpty(commonClass, "");
                $spinner = $("<i>", { class: "spinner-icon " + commonClass + " " + spinnerClasses });
                $btn.$attachtedSpinner = $spinner;
                if (right === true) {
                    $btn.append($spinner);
                } else {
                    $btn.prepend($spinner);
                }
                $btn.setBoolTrueAttr(attr);
            }
            if (!$.isEmpty($currentIcon) && $currentIcon.length > 0) {
                $currentIcon.toggleClass("hide");
            }
            return $btn.isBoolAttr(attr);
        }
        return false;
    }
};
$.app.service.redirect = {

    toLogin: function () {
        var loginUrl = $.app.urls.getGeneralUrlSchema(false, ["login"]).login;
        //console.log(loginUrl);
        $.app.service.redirect.to(loginUrl);
    },

    to: function (url) {
        /// <summary>
        /// url to a location.
        /// </summary>
        /// <param name="url" type="type"></param>
        if (url[0] === "/") {
            // relative path
            var host = window.location.hostname,
                protocol = window.location.protocol,
                port = window.location.port,
                path = url;
            if (!$.isEmpty(port)) {
                port = ":" + port;
            }
            url = protocol + "//" + host + port + path;
            //console.log(url);
            window.location = url;
        } else {
            // absolute path.
            window.location = url;
        }
    }
};
$.app.service.user = {
    isLoggedIn: function () {
        $.app.service.redirect.toLogin();
        return $.getHiddenValue("is-logged") === "True";
    },
    
};
;$.app = $.app || {};
/**
 * Ajax library to make any form submit to ajax call.
 */
;$.app.ajax = {
    attr: {
        successMessage: "message-on-success",
        failMessage: "message-on-fail",
        replaceContainerSelector: "replace-container-selector",
        onlyMakeRequestIf: "only-make-request-if",
        showSpinner: "shown-spinner",
        blockUISelector: "block-UI-selector"
    },
    events: {
        beforeSend: "before-sending-call",
        afterReceive: "after-receive-call",
        onSuccess: "on-success-call",
        onfailed: "on-fail-call",
        always: "always-call",
    }
};
$.nestedClone = function (schema) {
    /// <summary>
    /// (Little bit slow) Created nested cloned object. It will not work for recursive pointing object.
    /// Cloning test by Alim : http://jsperf.com/js-cloning-performance-test
    /// </summary>
    /// <param name="schema" type="type"></param>
    /// <returns type=""></returns>
    var schemaCopy;

    // Handle the 3 simple types, and null or undefined
    if (null == schema || "object" != typeof schema) return schema;

    // Handle Date
    if (schema instanceof Date) {
        schemaCopy = new Date();
        schemaCopy.setTime(schema.getTime());
        return schemaCopy;
    }

    // Handle Array
    if (schema instanceof Array) {
        schemaCopy = new Array(schema.length);
        for (var i = 0, len = schema.length; i < len; i++) {
            schemaCopy[i] = $.nestedClone(schema[i]);
        }
        return schemaCopy;
    }

    // Handle Object
    if (schema instanceof Object) {
        schemaCopy = {};
        for (var attr in schema) {
            if (schema.hasOwnProperty(attr)) schemaCopy[attr] = $.nestedClone(schema[attr]);
        }
        return schemaCopy;
    }

    throw new Error("Unable to create the given schema type! Its type isn't supported.");
}

$.nonNestedClone = function (schema) {
    /// <summary>
    /// (Very fast) Created non-nested cloned object. It will not create nested json objects.
    /// Cloning test by Alim : http://jsperf.com/js-cloning-performance-test
    /// </summary>
    /// <param name="schema" type="type"></param>
    /// <returns type=""></returns>
    var schemaCopy;

    // Handle the 3 simple types, and null or undefined
    if (null == schema || "object" != typeof schema) return schema;

    // Handle Date
    if (schema instanceof Date) {
        schemaCopy = new Date();
        schemaCopy.setTime(schema.getTime());
        return schemaCopy;
    }

    // Handle Array
    if (schema instanceof Array) {
        schemaCopy = new Array(schema.length);
        for (var i = 0, len = schema.length; i < len; i++) {
            schemaCopy[i] = schema[i];
        }
        return schemaCopy;
    }

    // Handle Object
    if (schema instanceof Object) {
        schemaCopy = {};
        for (var attr in schema) {
            if (schema.hasOwnProperty(attr)) schemaCopy[attr] = schema[attr];
        }
        return schemaCopy;
    }

    throw new Error("Unable to create the given schema type! Its type isn't supported.");
}
; $.app.constants = {
    server: "http://localhost:8080/api/",
    authUrlPath: "login/jiraLogin",
    queryUrlPath: "jiraQueries",
    jiraQueryData: [
        " AND status in (Resolved, Closed)", //  AND resolved >= @D1 AND resolved <= @D2, resolved >= 2017-08-01 AND resolved <= 2017-08-31
        " AND status in (Reopened)", // all reopen  || project in (@ProjectName)
        " AND status in (Reopened) AND cf[10904] is not empty" // defects with delta or any other
    ],
    jiraProjects: [
        {
            projectsId: "CCAP, CC",
            projectsDisplayName: "Chefs Culinar"
        },
        {
            projectsId: "BREN",
            projectsDisplayName: "Brenntag"
        },
        {
            projectsId: "EVA, EVBS",
            projectsDisplayName: "Evobus"
        },
        {
            projectsId: "PLB",
            projectsDisplayName: "Pipelife"
        },
        {
            projectsId: "GBO",
            projectsDisplayName: "GBO"
        },
        {
            projectsId: "SGG, SGH, SGC, SGP, SAN",
            projectsDisplayName: "Saint Gobain"
        },
        {
            projectsId: "TAL",
            projectsDisplayName: "Talis"
        },
        {
            projectsId: "IKO",
            projectsDisplayName: "IKO"
        },
        {
            projectsId: "STK",
            projectsDisplayName: "STK"
        },
        {
            projectsId: "BREN",
            projectsDisplayName: "RISO"
        },
        {
            projectsId: "BUTST",
            projectsDisplayName: "Bulter"
        }
    ]


};
$.app.modal = {
    $modalStacks: [],
    $modalIds: [],
    push: function ($modal) {
        var self = $.app.modal,
            list = self.$modalStacks;
        list.push($modal);
    },
    pop: function () {
        var self = $.app.modal,
            list = self.$modalStacks,
            $modal = list[list.length - 1];
        list.pop();
        return $modal;
    },
    hidePrevious: function () {
        var self = $.app.modal,
           list = self.$modalStacks,
           $modal = list[list.length - 2];
        if (!$.isEmpty($modal)) {
            $modal.modal('hide');
        }
    },
    showPrevious: function () {
        var self = $.app.modal,
            len = self.$modalStacks.length,
            list = self.$modalStacks;
        var $modal = list[len-2]; // get previous one.
        if (!$.isEmpty($modal)) {
            $modal.modal('hide');
            setTimeout(function () {
                $modal.modal('show');
            }, 400);
        }
    },
    show: function ($modal, $modalBody, url, spinnerShowMethod, spinnerHideMethod, onBeforeRequest,onComplete) {
        /// <summary>
        /// Shows modal and track it..
        /// Calling showPrevious will display previous modal.
        /// </summary>
        /// <param name="$modal"></param>
        /// <param name="$modalBody"></param>
        /// <param name="url"></param>
        /// <param name="spinnerShowMethod"></param>
        /// <param name="spinnerHideMethod"></param>
        /// <param name="onComplete"></param>
        /// <returns type=""></returns>

        //console.log(url);
        $.executeFunction(onBeforeRequest);
        $.executeFunction(spinnerShowMethod);
        var self = $.app.modal;
        jQuery.ajax({
            method: "Get", // by default "GET"
            url: url,
            dataType: "Html" //, // "Text" , "HTML", "xml", "script" 
        }).done(function (response) {
            $.executeFunction(spinnerHideMethod);
            $modalBody.html(response);
            $modal.modal("show");
            self.push($modal);
            $.executeFunction(onComplete);
        }).fail(function (jqXHR, textStatus, exceptionMessage) {
            console.log("Request failed: " + exceptionMessage);
        });
    }

}
$.app.pagination = function($paginationContainer, pageCountUrl, selectedPage, pagesNumberToDisplay, additionalClass, paginationClass, onComplete) {
    /// <summary>
    /// render pagination numbers
    /// </summary>
    /// <param name="$paginationContainer">The jQuery container where the pagination will be created.</param>
    /// <param name="pageCountUrl">Where to retrieve the page count.</param>
    /// <param name="selectedPage">Which page is currently selected.</param>
    /// <param name="pagesNumberToDisplay"></param>
    /// <param name="additionalClass">If any additional class need to be added with the pagination ul.</param>
    /// <param name="paginationClass">class will be added with the anchors by default it would be 'pagination-request'</param>
    /// <param name="onComplete">On complete this function will run.</param>
    var renderPagination = function(totalPageCount) {
        if ($.app.isDebugging) {
            console.log("Page count:");
            console.log(totalPageCount);
        }
        if (!paginationClass) {
            paginationClass = "pagination-request";
        }
        if (!additionalClass) {
            additionalClass = "";
        }
        var pagesCount = totalPageCount,
            $ul = $("<ul></ul>", {
                'class': "pagination " + additionalClass
            });
        var start = 2, end = pagesCount;
        var mid = Math.ceil(pagesNumberToDisplay / 2); // 5/2 = 2
        if (pagesCount > pagesNumberToDisplay) {
            end = selectedPage + mid;
            start = selectedPage - mid;
            if (start <= 0) {
                start = 0 - start;
                end += start;
                start = 2;
            }
            if (end >= pagesCount) {
                start = selectedPage - mid - (end - pagesCount);
                end = pagesCount;
            }
        }
        // first page link
        var differentPage = 1,
            differnetPageStringName = "First",
            isSelectedPage = selectedPage === differentPage;
        var $li = $("<li></li>", {
            'class': isSelectedPage === true ? "active" : null
        });
        var linkUrl = "#" + differentPage,
            anchorHtml = "<a class='" + paginationClass + "' href='" + linkUrl + "' data-page='" + differentPage + "'>" + differnetPageStringName + "</a>";
        $li.append(anchorHtml);
        $li.appendTo($ul);

        if (start !== 2) {
            differentPage = start - 1;
            differnetPageStringName = "...";
            isSelectedPage = selectedPage === differentPage;
            linkUrl = "#" + differentPage;
            $li = $("<li></li>", {
                'class': isSelectedPage === true ? "active" : null
            });
            anchorHtml = "<a class='" + paginationClass + "' href='" + linkUrl + "' data-page='" + differentPage + "'>" + differnetPageStringName + "</a>";
            $li.append(anchorHtml);
            $li.appendTo($ul);
        }

        for (var i = start; i <= end; i++) {
            isSelectedPage = selectedPage === i;
            linkUrl = "#" + i; //tableUrl + queryStringforPage;
            $li = $("<li></li>", {
                'class': isSelectedPage === true ? "active" : null
            });
            anchorHtml = "<a class='" + paginationClass + "' href='" + linkUrl + "' data-page='" + i + "'>" + i + "</a>";
            $li.append(anchorHtml);
            $li.appendTo($ul);
        }
        if (end + 1 < pagesCount) {
            // ... for end
            differentPage = end + 1 <= pagesCount ? end + 1 : pagesCount;
            differnetPageStringName = "...";
            isSelectedPage = selectedPage === differentPage;
            linkUrl = "#" + differentPage;
            $li = $("<li></li>", {
                'class': isSelectedPage === true ? "active" : null
            });
            anchorHtml = "<a class='" + paginationClass + "' href='" + linkUrl + "' data-page='" + differentPage + "'>" + differnetPageStringName + "</a>";
            $li.append(anchorHtml);
            $li.appendTo($ul);
        }
        differentPage = pagesCount;
        differnetPageStringName = "Last";
        isSelectedPage = selectedPage === differentPage;
        linkUrl = "#" + differentPage;
        $li = $("<li></li>");
        anchorHtml = "<a class='" + paginationClass + "' href='" + linkUrl + "' data-page='" + differentPage + "'>" + differnetPageStringName + "</a>";
        $li.append(anchorHtml);
        $li.appendTo($ul);
        $ul.appendTo($paginationContainer);
        if (typeof onComplete === "function") {
            onComplete.apply();
        }
    }

    jQuery.ajax({
        method: "POST", // by default "GET"
        url: pageCountUrl,
        dataType: "JSON" //, // "Text" , "HTML", "xml", "script" 
    }).done(function(response) {
        var totalCountOfPages = response;
        $.setHiddenValue("pages-exist", totalCountOfPages);
        renderPagination(totalCountOfPages);
    });

};
;$.app.regularExp = {
    friendlyUrl : "[^A-Za-z0-9_\.~]+"
};
$.app.selectors = {
    ids : {
        processForm: "server-validation-form",
        bodyStart: "body-start"
    }
};
/// <reference path="urls.js" />
/// <reference path="constants.js" />
/// <reference path="country-phone.js" />
/// <reference path="devOrg.js" />
/// <reference path="initialize.js" />
/// <reference path="jQueryExtend.js" />
/// <reference path="jsonCombo.js" />
/// <reference path="regularExp.js" />
/// <reference path="selectors.js" />
/// <reference path="upload.js" />
/// <reference path="D:\Working\GitHub\WereViewProject\WeReviewApp\Content/Scripts/jquery-2.1.4.js" />
/// <reference path="D:\Working\GitHub\WereViewProject\WeReviewApp\Content/Scripts/jquery-2.1.4.intellisense.js" />
/// <reference path="../schema/url.js" />
$.app.urls = {
    /*
     * hostUrl will be retrieved from hidden field "#host-url"
     * Contains a slash at the end.
     */
    hostUrl: null,

    validator: "Validator/",
    usernameValidation: "Username",
    emailValidation: "Email",
    timeZoneJson: "Services/GetTimeZone", // look like this /Partials/GetTimeZone/CountryID
    languageJson: "Services/GetLanguage", // look like this /Partials/GetTimeZone/CountryID
    getHostUrl: function () {
        /// <summary>
        /// Retrieve host url from host-url id hidden field
        /// Return host url with a slash at the bottom.
        /// </summary>
        /// <returns type="">Returns the host url.</returns>
        var self = $.app.urls;
        var hostUrl = self.hostUrl;

        if ($.isEmpty(hostUrl)) {
            var dev = $.app,
                selectors = dev.selectors;
            var id = selectors.hostFieldId;
            var $hostUrlHidden = $.byId(id);
            if ($hostUrlHidden.length > 0) {
                var url = $hostUrlHidden.val();
                self.hostUrl = $.returnUrlWithSlash(url);
            }
        }
        return self.hostUrl;
    },

    getAbsUrl: function (givenUrl) {
        /// <summary>
        /// Given url shouldn't have any slash at the begining.
        /// </summary>
        /// <param name="givenUrl">url shouldn't have any slash at the begining.</param>
        /// <returns type="">Return absolute url containing host name and url.</returns>
        var self = $.app.urls;
        var hostUrl = self.hostUrl;
        if (!$.isEmpty(hostUrl)) {
            return hostUrl + givenUrl;
        }
        hostUrl = self.getHostUrl();
        return hostUrl + givenUrl;
    },


    getAbsValidatorUrl: function (url) {
        /// <summary>
        /// Returns absolute url of a validation
        /// </summary>
        /// <param name="url"></param>
        /// <returns type="string">returns absolute url.</returns>
        var self = $.app.urls;

        var urlCombined = self.validator + url;
        return self.getAbsUrl(urlCombined);

    },

    getGeneralUrlSchema: function (shouldGetDefaultSchema, otherUrlsList) {
        /// <summary>
        /// Generate a general url schema , which contains
        /// It will look for hidden fields : edit-url, add-url, delete-url, save-url
        /// </summary>
        /// <param name="shouldGetDefaultSchema" type="bool">
        /// T/F , T/undefined : gets the default schmea.
        /// </param>
        /// <param name="otherUrlsList" type="type">
        /// Array of list items containing new url names.
        /// If null then only return url schema with add,edit,save,remove urls.
        /// For example, retrieving "edit-url" hidden value pass "edit".
        /// </param>
        /// <returns type="$.app.schema.url">
        /// Returns a url schema object from schema folder's url (schema).
        /// </returns>
        var urlSchema, i, urlName;
        if ($.isEmpty(shouldGetDefaultSchema) || shouldGetDefaultSchema === true) {
            urlSchema = $.app.schema.create($.app.schema.url);
            var keys = Object.keys(urlSchema);
            for (i = 0; i < keys.length; i++) {
                urlName = keys[i];
                urlSchema[urlName] = $.getHiddenValue(urlName + "-url");
            }
        } else {
            urlSchema = {};
        }

        if (!$.isEmpty(otherUrlsList)) {
            for (i = 0; i < otherUrlsList.length; i++) {
                urlName = otherUrlsList[i];
                urlSchema[urlName] = $.getHiddenValue(urlName + "-url");
            }
        }
        return urlSchema;
    }
};
/// <reference path="../extensions/ajax.js" />
/// <reference path="../extensions/clone.js" />
/// <reference path="../extensions/constants.js" />
/// <reference path="../extensions/hiddenContainer.js" />
/// <reference path="../extensions/inputChangeTracker.js" />
/// <reference path="../extensions/modal.js" />
/// <reference path="../extensions/pagination.js" />
/// <reference path="../extensions/regularExp.js" />
/// <reference path="../extensions/selectors.js" />
/// <reference path="../extensions/spinner.js" />
/// <reference path="../libs/DevOrgPlugins/WeReviewApps.js" />
/// <reference path="../libs/jquery.blockUI.js" />
/// <reference path="../extensions/urls.js" />
/// <reference path="../libs/toastr.js" />
/// <reference path="../libs/underscore.js" />
/// <reference path="../byId.js" />
/// <reference path="../controllers.js" />
/// <reference path="../jQueryCaching.js" />
/// <reference path="../jQueryExtend.fn.js" />
/// <reference path="../app.global.js" />
/// <reference path="../jQueryExtend.js" />
/// <reference path="../schema/hashset.js" />
/// <reference path="../attachInitialize.js" />
/// <reference path="../schema/schema.js" />
/// <reference path="../libs/jQuery/jquery-2.2.3.intellisense.js" />
/// <reference path="../schema/url.js" />
/// <reference path="../Prototype/Array.js" />

$.app.controllers.indexController = {
    // any thing related to controllers.
    pageId: "index-page",
    $pageElement: null,
    initialize: function () {
        //anything to config

    },
    isDebugging: true,
    actions: {
        /// <summary>
        /// Represents the collection of actions exist inside a controller.
        /// </summary>
        index: function () {
            /// <summary>
            /// Represents index action page.
            /// Refers to the data-action attribute.
            /// </summary>
            /// <returns type=""></returns>
            var self = $.app.controllers.indexController,
                consts = $.app.constants,
                server = consts.server,
                quriesTemplate = consts.jiraQueryData,
                projects = consts.jiraProjects,
                queryPath = consts.queryUrlPath;

            var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

            var $barchartPanel = $.byId("barchart-panel");
            $barchartPanel.hide();

            var projectsListInstance = []; // contains copy of constant structure

            var requestsCompleted = 0; // how many requests have been completed.

            var d = new Date();
            var monthIndex = d.getMonth();
            //console.log("Hello from login");
            //console.log(self);

            var $monthSelect = $.byId("month-select");

            var options = [];
            for (var i = 0; i < months.length; i++) {
                var selected = '';
                if (monthIndex === i) {
                    selected = "selected";
                }
                options.push("<option value='" + i + "' " + selected + " >" + months[i] + "</option>");
            }

            $monthSelect.append(options.join(""));



            //console.log(quriesTemplate);
            //console.log(projects);

            $monthSelect.selectpicker('val', monthIndex);

            var jiraCookie = $.cookie('jiraCookie');

            // console.log(self);


            if ($.isEmptyObject(jiraCookie)) {
                $.app.service.redirect.to("/views/login.html");
            } else {
                jiraCookie = JSON.parse(jiraCookie);
                if ($.isEmptyObject(jiraCookie.cookie)) {
                    $.app.service.redirect.to("/views/login.html");
                }
            }


            var login = JSON.parse($.cookie('jiraCookie'));
            // console.log(login);

            var $form = $.byId("jira-form");

            var getFirstAndLastDate = function (selectedMonth) {
                var date = new Date(), y = date.getFullYear(), m = selectedMonth;
                var firstDay = y + "-" + m + "-" + new Date(y, m, 1).getDate();
                var lastDay = y + "-" + m + "-" + new Date(y, m + 1, 0).getDate();

                return {
                    firstDay: firstDay,
                    lastDay: lastDay
                }
            };

            $.byId("logout-button").click(function (e) {
                e.preventDefault();
                $.removeCookie('jiraCookie');
                $.app.service.redirect.to("/views/login.html");
            });

            var formRow = function (arr) {
                var str = [];
                for (var j = 0; j < arr.length; j++) {
                    var element = "<td>" + arr[j] + "</td>";
                    str.push(element);
                }
                return "<tr>" + str.join("") + "</tr>";
            }

            var processProjectDataIntoTable = function () {
                var tableHtml = [];
                var datasets = [];
                console.log(projectsListInstance);
                for (var j = 0; j < projectsListInstance.length; j++) {
                    var projectw = projectsListInstance[j],
                        title = projectw.projectsDisplayName,
                        results = projectw.results,
                        resolvedJiras = results[0].total,
                        communicationGap = results[1].total - results[2].total,
                        deltaJiras = results[2].total,
                        cells = [title, resolvedJiras, communicationGap, deltaJiras],
                        chartRow = { y: title, a: resolvedJiras, b: communicationGap, c: deltaJiras },
                        row = formRow(cells);
                    console.log(cells);
                    console.log(row);
                    datasets.push(chartRow);
                    tableHtml.push(row);
                }

                var htmlString = tableHtml.join("");

                var $templateTable = $.byId("table-template").clone().attr('id', 'summary-table');
                var $placeHolder = $.byId("table-placeholder");

                $templateTable.find("tbody").html(htmlString);
                console.log($templateTable.html());
                $placeHolder.empty().append($templateTable);
                $.byId("summary-table").DataTable({
                    responsive: true
                });

                $barchartPanel.show();
                Morris.Bar({
                    element: 'morris-bar-chart',
                    data: datasets,
                    xkey: 'y',
                    ykeys: ['a', 'b', 'c'],
                    labels: ['Resolved Jiras', 'jiras open due to communication gap', 'jiras open due to defects/bugs/delta requirements']
                });
            }

            var getJiraResults = function (project, login) {


                var data = {
                    "jqls": project.jqls,
                    "login": login,
                    "additionalJiraFilters": {
                        "maxResults": 1
                    },
                    "filterFields": ["total"]
                };


                var dataJsonString = JSON.stringify(data);

                $.ajax({
                    type: "POST",
                    url: server + queryPath,
                    data: dataJsonString,
                    contentType: "application/json",
                    dataType: "json",

                    success: function (response) {
                        // console.log(response);
                        project.results = response;
                        project.isDone = true;
                        // console.log(project);
                        // console.log(projectsListInstance);
                        requestsCompleted += 1;
                        console.log("Req completed :" + requestsCompleted + " out of " + projectsListInstance.length);

                        if (requestsCompleted >= projectsListInstance.length) {
                            console.log("triggering render");
                            processProjectDataIntoTable(projectsListInstance);
                        }

                    },
                    error: function (x, e, d) {
                        //console.log("Error");
                        //console.log(x);
                        //console.log(e);
                        //console.log(d);

                        alert("error");
                    }
                });
            }




            $form.submit(function (e) {
                e.preventDefault();

                requestsCompleted = 0;

                var values = $form.serializeArray();
                var selectedMonth = parseFloat($monthSelect.selectpicker('val')) + 1;
                var dates = getFirstAndLastDate(selectedMonth);
                // console.log(dates);


                alert("Processing the request ! Please wait");

                projectsListInstance = [];
                //var jqlList = [];
                //AND resolved >= @D1 AND resolved <= @D2, resolved >= 2017-08-01 AND resolved <= 2017-08-31

                var dateQuery = " AND resolved >= " + dates.firstDay + " AND resolved <= " + dates.lastDay;
                // console.log(dateQuery);


                for (var j = 0; j < projects.length; j++) {// 1; j++) {//
                    var project = projects[j],
                        projectId = project.projectsId,
                        projectQuery = "project in (" + projectId + ") ";

                    project.jqls = [];

                    for (var k = 0; k < quriesTemplate.length; k++) {//quriesTemplate.length; k++) {
                        var query = projectQuery + quriesTemplate[k] + dateQuery;
                        // console.log(query);
                        project.jqls.push(query);
                        //jqlList.push(query);
                    }

                    // console.log("starting : " + projectId);
                    // console.log(project);

                    getJiraResults(project, login);

                    projectsListInstance.push(project);

                }

                //var interval = setInterval(function () {
                //    if (requestsCompleted === projectsListInstance.length) {
                //        // all processing done.
                //        processProjectDataIntoTable(projectsListInstance);
                //        alert("Done");
                //        clearInterval(interval);

                //    }
                //},
                //    400);

                //console.log(projectsListInstance);


                //getJiraResults(jqlList, login);

                // console.log(jqlList);

                //var pass = $.jsonSearch(values, "name", "password").value;
                //var user = $.jsonSearch(values, "name", "email").value;
                // console.log($monthSelect.selectpicker('val'));
                //console.log(user);
                //console.log(pass);
            });

            //console.log($.cookie('name'));
            //console.log($.cookie('name', 'Hello'));
            //console.log($.cookie('name'));

        }

    }
}
/// <reference path="../extensions/ajax.js" />
/// <reference path="../extensions/clone.js" />
/// <reference path="../extensions/constants.js" />
/// <reference path="../extensions/hiddenContainer.js" />
/// <reference path="../extensions/inputChangeTracker.js" />
/// <reference path="../extensions/modal.js" />
/// <reference path="../extensions/pagination.js" />
/// <reference path="../extensions/regularExp.js" />
/// <reference path="../extensions/selectors.js" />
/// <reference path="../extensions/spinner.js" />
/// <reference path="../libs/DevOrgPlugins/WeReviewApps.js" />
/// <reference path="../libs/jquery.blockUI.js" />
/// <reference path="../extensions/urls.js" />
/// <reference path="../libs/toastr.js" />
/// <reference path="../libs/underscore.js" />
/// <reference path="../byId.js" />
/// <reference path="../controllers.js" />
/// <reference path="../jQueryCaching.js" />
/// <reference path="../jQueryExtend.fn.js" />
/// <reference path="../app.global.js" />
/// <reference path="../jQueryExtend.js" />
/// <reference path="../schema/hashset.js" />
/// <reference path="../attachInitialize.js" />
/// <reference path="../schema/schema.js" />
/// <reference path="../libs/jQuery/jquery-2.2.3.intellisense.js" />
/// <reference path="../schema/url.js" />
/// <reference path="../Prototype/Array.js" />

//; $.app.controllers = $.app.controllers || {};
$.app.controllers.initialize = function (controllerName) {
    /// <summary>
    /// Run all modules inside controllers.
    /// </summary>
    var app = $.app,
        controllersList = app.controllers,
        runAll = true,
        keys = [],
        key,
        pageId,
        i,
        controllers = app.controllers,
        currentController,
        bindingEventsNames,
        binding = app.events.binding,
        addController = false;
    if ($.isEmpty(controllerName)) {
        keys = Object.keys(controllersList);
    } else {
        keys = controllerName.split(",");
        addController = true;
    }

    for (i = 0; i < keys.length; i++) {
        key = keys[i];
        if (addController === true) {
            currentController = controllersList[key + "Controller"];
        } else {
            currentController = controllersList[key];
        }
        pageId = currentController["pageId"];
        if (!$.isEmpty(pageId)) {
            if (controllers.isCurrentPage(currentController)) {
                controllers.execute(currentController, runAll);
                bindingEventsNames = controllers.getPageBindings(currentController);
                if (bindingEventsNames === "*") {
                    // binds all bindings
                    binding.executeAll(currentController);
                } else if (bindingEventsNames !== "") {
                    // binds specific events using csv
                    binding.execute(currentController, bindingEventsNames);
                }
                $.executeFunction(currentController["initialize"]);
            }
        }
    }
}
/// <reference path="../extensions/ajax.js" />
/// <reference path="../extensions/clone.js" />
/// <reference path="../extensions/constants.js" />
/// <reference path="../extensions/hiddenContainer.js" />
/// <reference path="../extensions/inputChangeTracker.js" />
/// <reference path="../extensions/modal.js" />
/// <reference path="../extensions/pagination.js" />
/// <reference path="../extensions/regularExp.js" />
/// <reference path="../extensions/selectors.js" />
/// <reference path="../extensions/spinner.js" />
/// <reference path="../libs/DevOrgPlugins/WeReviewApps.js" />
/// <reference path="../libs/jquery.blockUI.js" />
/// <reference path="../extensions/urls.js" />
/// <reference path="../libs/toastr.js" />
/// <reference path="../libs/underscore.js" />
/// <reference path="../byId.js" />
/// <reference path="../controllers.js" />
/// <reference path="../jQueryCaching.js" />
/// <reference path="../jQueryExtend.fn.js" />
/// <reference path="../app.global.js" />
/// <reference path="../jQueryExtend.js" />
/// <reference path="../schema/hashset.js" />
/// <reference path="../attachInitialize.js" />
/// <reference path="../schema/schema.js" />
/// <reference path="../libs/jQuery/jquery-2.2.3.intellisense.js" />
/// <reference path="../schema/url.js" />
/// <reference path="../Prototype/Array.js" />

$.app.controllers.loginController = {
    // any thing related to controllers.
    pageId: "login-page",
    $pageElement: null,
    initialize: function () {
        //anything to config

    },
    isDebugging: true,
    actions: {
        /// <summary>
        /// Represents the collection of actions exist inside a controller.
        /// </summary>
        index: function () {
            /// <summary>
            /// Represents index action page.
            /// Refers to the data-action attribute.
            /// </summary>
            /// <returns type=""></returns>
            var self = $.app.controllers.loginController,
                consts = $.app.constants,
                server = consts.server,
                authPath = consts.authUrlPath,
                queryPath = consts.queryUrlPath;

            //console.log("Hello from login");
            //console.log(self);
            var jiraCookie = $.cookie('jiraCookie');
            if (!$.isEmptyObject(jiraCookie)) {
                jiraCookie = JSON.parse(jiraCookie);
                if (!$.isEmptyObject(jiraCookie.cookie)) {
                    $.app.service.redirect.to("/views/index.html");
                }
            }

            var $form = $.byId("login-form");

            $form.submit(function (e) {
                e.preventDefault();
                var values = $form.serializeArray();
                var pass = $.jsonSearch(values, "name", "password").value;
                var user = $.jsonSearch(values, "name", "email").value;


                var loginArgs = {
                    username: user,
                    password: pass
                };


                var jsonString = JSON.stringify(loginArgs);

                $.ajax({
                    type: "POST",
                    url: server + authPath,
                    data: jsonString,
                    contentType: "application/json",
                    dataType: "json",

                    success: function (response) {
                        console.log("Success");
                        console.log(response);
                        response = JSON.stringify(response);
                        $.cookie('jiraCookie', response);
                        $.app.service.redirect.to("/views/index.html");
                    },
                    error: function (x, e, d) {
                        //console.log("Error");
                        //console.log(x);
                        //console.log(e);
                        //console.log(d);
                        alert("Please run the API server, cannot login to the jira or probably credentials are wrong.");
                    }
                });
          
            });

            //console.log($.cookie('name'));
            //console.log($.cookie('name', 'Hello'));
            //console.log($.cookie('name'));

        }

    }
}
/// <reference path="../libs/jQuery/jquery-2.2.3.js" />
/// <reference path="../libs/jQuery/jquery-2.2.3.intellisense.js" />
/// <reference path="../jQueryCaching.js" />
/// <reference path="../app.js" />
/// <reference path="../Prototype/Array.js" />
/// <reference path="../extensions/selectors.js" />
; $.app = $.app || {};
; $.app.component = $.app.component || {};
; $.app.component.list = $.app.component.list || {};

/**
 * Loads this component if this string value present in the hidden field of "Component-Enable"
 * Please add a hidden with id "Component-Enable"
 * <input id="Component-Enable" value="revolution-gallery,form-validation,enter-to-focus-next(id)" />
 * @returns {} 
 */

$.app.component.list = {
    "enter-to-focus-next": function (id, submitAtLast, atLastFocusOnFirst) {
        submitAtLast = $.setDefaultBoolOnEmpty(submitAtLast, false);
        atLastFocusOnFirst = $.setDefaultBoolOnEmpty(atLastFocusOnFirst, true);
        var $form = $.byId(id);
        $.app.global.enterToNextInputFocus($form, submitAtLast, atLastFocusOnFirst);
    },
    "enter-to-focus-next-no-tags": function (id, submitAtLast, isDynamicSelector, atLastFocusOnFirst) {
        submitAtLast = $.setDefaultBoolOnEmpty(submitAtLast, false);
        isDynamicSelector = $.setDefaultBoolOnEmpty(isDynamicSelector, false);
        atLastFocusOnFirst = $.setDefaultBoolOnEmpty(atLastFocusOnFirst, true);
        var $form = $.byId(id);
        $.app.global.enterToNextInputFocusWithoutTags($form, submitAtLast, isDynamicSelector, atLastFocusOnFirst);
    },
    "revolution-gallery": function () {
        var $frontPageGallyery = $(".tp-banner");
        if ($frontPageGallyery.length > 0) {
            $frontPageGallyery.show().revolution({
                dottedOverlay: "none",
                delay: 5000,
                startwidth: 960,
                startheight: 320,
                hideThumbs: 10,
                fullWidth: "off",
                navigationType: "bullet",
                navigationStyle: "preview2",
                forceFullWidth: "off"
            });
        }
    },
    "wow" : function() {
        var wow = new WOW({
            boxClass: 'wow', // animated element css class (default is wow)
            animateClass: 'animated', // animation css class (default is animated)
            offset: 100, // distance to the element when triggering the animation (default is 0)
            mobile: false // trigger animations on mobile devices (true is default)
        });
        wow.init();
    },
    "form-validation": function () {
        var app = $.app,
            $processForm = app.getProcessForm(); // get the form #server-validation-form


        if ($processForm.length > 0) {
            var $submitBtn = $.byId("submit-btn");
            $processForm.serverValidate({
                crossDomain: false,
                multipleRequests: true,
                checkValidationBeforeSendingRequest: true,
                dontSendSameRequestTwice: false,
                disableInputOnValidation: false,
                focusPersistIfNotValid: false,
                hideOnValidation: false,
                $formElement: $processForm,
                $submitButton : $submitBtn,
                triggerValidationBeforeFormSubmit: true
            });
        }
    },
    "tag": function () {
        var app = $.app,
            $processForm = app.getProcessForm();

        if ($processForm.length > 0) {
            var $createdTags = $(".tag-inputs");
            if ($createdTags.length > 0) {
                var $tokenField = $processForm.find("[name='__RequestVerificationToken']"),
                    token = $tokenField.val();
                for (var i = 0; i < $createdTags.length; i++) {
                    var $tagsInput = $($createdTags[0]),
                        urlToPost = $tagsInput.attr("data-url");
                    //
                    $tagsInput.tagsinput({
                        freeInput: true,
                        trimValue: true,
                        typeahead: {
                            source: function (query) {
                                return $.post(urlToPost, { id: query, __RequestVerificationToken: token }).done(function (response) {
                                    //console.log("tags:");
                                    //console.log("response:");
                                    //console.log(response);
                                });
                            }
                        },
                        onTagExists: function (item, $tag) {
                            if ($.isEmpty($tag)) {
                                $tag.hide.fadeIn();
                            }
                        }
                    });
                }
            }

        }
    },
    "isotop": function () {
        var $isotopContainer = $(".search-page-apps-list");
        if ($isotopContainer.length > 0) {
            var $filterIsotopItems = $('.filter').find("li").find("a");
            if ($filterIsotopItems.length > 0) {
                $filterIsotopItems.click(function () {
                    $filterIsotopItems.removeClass('active');
                    $(this).addClass('active');
                    var selector = $(this).attr('data-filter');

                    $isotopContainer.isotope({
                        filter: selector
                    });
                    return false;
                });
            }
        }
    },
    "convert-youtube-link-to-embed": function () {
        /// <summary>
        /// Add id "youtube-link-convert" on input or put the input as "#server-validation-form .youtube-link-convert"
        /// then it will work.
        /// </summary>
        var app = $.app,
            cssClass = "youtube-link-convert",
            $anyInputs = $.findCachedId(cssClass),
            $processForm = app.getProcessForm(),
            $inputs = [],
            isGivenUrlMatchedDomain = app.global.isGivenUrlMatchedDomain;

        if ($anyInputs.length > 0) {
            $inputs = $anyInputs;
        } else if ($processForm.length > 0) {
            $inputs = $processForm.find("." + cssClass);
        }

        if ($inputs.length > 0) {
            $inputs.blur(function () {
                var $this = $(this),
                    text = $this.val();
                if (!$.isEmpty(text) && text.indexOf("<iframe") === -1 && isGivenUrlMatchedDomain(text, "youtu\.be|youtube\.com")) {
                    text = text.replace(/(?:https:\/\/|http:\/\/)?(?:www\.)?(?:youtube\.com|youtu\.be)\/(?:watch\?v=)?(.+)/g, '$1');
                    var split = text.split("&");
                    var id = split[0];
                    var html = "<iframe src=\"//youtube.com/embed/" + id + "\" frameborder=\"0\" allowfullscreen></iframe>";
                    $this.val(html);
                }
            });
        }
    },
    "owl-carousel": function () {
        var owlOptions = {
            responsiveClass: true,
            navigation: true,
            navigationText: [
                "<i class='fa fa-chevron-circle-left'></i>",
                "<i class='fa fa-chevron-circle-right'></i>"
            ],
            items: 1, //10 items above 1000px browser width
            //itemsDesktop: [1152, 6], //5 items between 1000px and 901px
            //itemsDesktopSmall: [900, 4], // betweem 900px and 601px
            //itemsTablet: [600, 3], //2 items between 600 and 0
            //itemsMobile: [450, 2],
            itemsCustom: [370, 1]
        };

        $(".app-suggested-list-items-mobile").owlCarousel(owlOptions);
        $(".featured-apps-list-items").owlCarousel(owlOptions);

        var $suggestionCarosel = $(".owl-list");
        if ($suggestionCarosel.length > 0) {
            $suggestionCarosel.owlCarousel({
                navigation: true,
                navigationText: [
                    "<i class='fa fa-chevron-circle-left'></i>",
                    "<i class='fa fa-chevron-circle-right'></i>"
                ],
                items: 7, //10 items above 1000px browser width
                itemsDesktop: [1152, 6], //5 items between 1000px and 901px
                itemsDesktopSmall: [966, 5], // betweem 900px and 601px
                itemsTabletSmall: [730, 4],
                itemsTablet: [600, 3], //2 items between 600 and 0
                //itemsCustom: [[0, 2], [435, 3], [450, 2], [600, 3], [730, 4], [900, 5],  [950, 6]], // [[740, 6], [1000, 8], [1200, 10], [1600, 16]]
                itemsMobile: [450, 2]
            });
        }

        var $appsPreview = $.findCachedId("apps-preview");
        if ($appsPreview.length > 0) {
            $appsPreview.owlCarousel({
                slideSpeed: 300,
                paginationSpeed: 400,
                singleItem: true,
                items: 1,
                itemsDesktop: false,
                itemsDesktopSmall: false,
                itemsTablet: false,
                itemsMobile: false,
                stopOnHover: true,
                navigation: true, // Show next and prev buttons
                pagination: false,
                autoHeight: true,
                navigationText: ["<i class='fa fa-angle-left'></i>", "<i class='fa fa-angle-right'></i>"]
            });
        }
    }
}

; $.app = $.app || {};
; $.app.events = $.app.events || {};
/**
 * Use "data-event-binding" attribute with js controller to execute specific events or write using csv or use * for finding all events if exist.
 */
; $.app.events.binding = {
    executeAll: function($controller) {
        var list = $.app.events.list, i,
            event;
        for (i = 0; i < list.length; i++) {
            event = list[i];
            $.executeFunctionWithArguments(event, [$controller]);
        }
    },
    execute: function ($controller, csvEvents) {
        var events = csvEvents.split(","),
            i,
            list = $.app.events.list,
            eventName,
            event;
        for (i = 0; i < events.length; i++) {
            eventName = events[i];
            event = list[eventName];
            $.executeFunctionWithArguments(event, [$controller]);
        }
    }
}
; $.app = $.app || {};
; $.app.events = $.app.events || {};
/**
 * Use "data-event-binding" attribute with js controller to execute specific events or write using csv or use * for finding all events if exist.
 */
; $.app.events.list = {
    click: function ($controller) {
        var name = "click",
            attr = "data-" + name,
            $page = $controller.$pageElement,
            $elements = $page.find("[" + attr + "]");
        if ($elements.length > 0) {
            $elements.click(function (e) {
                var $this = $(this),
                    name = $this.attr(attr),
                    executingEvent = $controller.bindEvents[name];
                if ($.executeFunctionWithArguments(executingEvent, [e, $this, name]) === false) {
                    console.log($controller);
                    throw new Error("Controller(pageId:" + $controller.pageId + ") doesn't have [" + name + "()] method in the bindEvents. Please add that.");
                }
            });
        }
    },
    submit: function ($controller) {
        var name = "submit",
            attr = "data-" + name,
            $page = $controller.$pageElement,
            $elements = $page.find("[" + attr + "]");
        if ($elements.length > 0) {
            $elements.submit(function (e) {
                var $this = $(this),
                    name = $this.attr(attr),
                    executingEvent = $controller.bindEvents[name];
                if ($.executeFunctionWithArguments(executingEvent, [e, $this, name]) === false) {
                    console.log($controller);
                    throw new Error("Controller(pageId:" + $controller.pageId + ") doesn't have [" + name + "()] method in the bindEvents. Please add that.");
                }
            });
        }
    }

}
/// <reference path="../extensions/clone.js" />

; $.app = $.app || {};
$.app.schema.hashset = {
    capacity: 1,
    list: {
        array: null,
        ids: null,
        count: 0
    },
    create: function (capacity) {
        /// <summary>
        /// create a new hash-set with the given capacity.
        /// </summary>
        /// <param name="schema" type="type">Give a schema type from the schema folder.</param>
        var hashset = $.app.schema.createNestedClone($.app.schema.hashset);
        delete hashset.create;
        if ($.isEmpty(capacity)) {
            hashset.capacity = 25;
        } else {
            hashset.capacity = capacity;
        }
        hashset.list.array = new Array(hashset.capacity);
        hashset.list.ids = new Array(hashset.capacity);
        return hashset;
    },
    setItem: function (id, items) {
        /// <summary>
        /// Add items uniquely by the given id and item is the hash item could be array or json or anything.
        /// </summary>
        /// <param name="id" type="type"></param>
        /// <param name="items" type="type"></param>
        var isIdEmpty = (id === undefined || id === null);
        if (isIdEmpty === false) {
            var item = this.getItemObject(id);
            if (item !== null) {
                // item not found in the existing list.
                this.list.array[item.index] = items;
                return true;
            }
            return false;
        }
        throw new Error("No id parameter given to set.");
    },
    setItemByIndex: function (index, id, items) {
        /// <summary>
        /// Add items uniquely by the given id and item is the hash item could be array or json or anything.
        /// </summary>
        /// <param name="id" type="type"></param>
        /// <param name="items" type="type"></param>
        var isIndexEmpty = (index === undefined || index === null);
        if (isIndexEmpty === false) {
            if (index <= this.list.count) {
                this.list.array[index] = items;
                this.list.ids[index] = id;
            } else {
                throw new Error("Sorry ! (index : " + index + ", id: " + id + ") given index is out of boundary.");
            }
        }
    },
    addUnique: function (id, items, modifyIfExist) {
        /// <summary>
        /// Add items uniquely by the given id and item is the hash item could be array or json or anything.
        /// </summary>
        /// <param name="id" type="type"></param>
        /// <param name="items" type="Anything : array, json or anything else."></param>
        /// <returns type="bool">Returns if the item is added to the list. If not unique then returns false.</returns>
        var isIdEmpty = (id === undefined || id === null);
        if (isIdEmpty === false) {
            var index = this.getItemIndex(id);
            if (index === -1) {
                // item not found in the existing list.
                this.add(id, items);
                return true;
            } else if (modifyIfExist) {
                this.setItemByIndex(index, id, items);
                return true;
            }
        } else {
            throw new Error("No id parameter given, so can't add new item to the hash-list.");
        }
        return false;
    },
    add: function (id, items) {
        /// <summary>
        /// First parameter is id and item is the hash item could be array or json or any item.
        /// </summary>
        /// <param name="args" type="type"></param>
        /// <returns type=""></returns>
        var isIdEmpty = (id === undefined || id === null);
        // console.log(this);
        // console.log(this.list);
        if (isIdEmpty === false) {
            var list = this.list,
                count = list.count,
                ids = list.ids,
                arr = list.array;
            // argument passed
            if (this.isPossibleToAddNew()) {
                ids[count] = id;
                arr[count] = items;
                this.list.count++;
            } else {
                ids.push(id);
                arr.push(items);
                this.list.count++;
            }
        } else {
            throw new Error("No id parameter given, so can't add new item to the hash-list.");
        }
    },
    isIdExist: function (id) {
        /// <summary>
        /// Returns true/false based on the if the id exist or not.
        /// </summary>
        /// <param name="id" type="type"></param>
        /// <returns type=""></returns>
        return this.getItemIndex(id) > -1;
    },
    getItemIndex: function (id) {
        /// <summary>
        /// Find and get the item from the list by id.
        /// </summary>
        /// <param name="id" type="type"></param>
        for (var i = 0; i < this.list.count; i++) {
            if (this.list.ids[i] === id) {
                return i;
            }
        }
        return -1;
    },
    getItemValue: function (id) {
        /// <summary>
        /// Find and get the item from the list by id.
        /// </summary>
        /// <param name="id" type="type"></param>
        /// <r
        var index = this.getItemIndex(id);
        if (index > -1) {
            // found
            return this.list.array[index];
        }
        return null;
    },
    getItemObject: function (id) {
        /// <summary>
        /// Find and get the item from the list by id.
        /// </summary>
        /// <param name="id" type="type"></param>
        var index = this.getItemIndex(id);
        if (index > -1) {
            // found
            return {
                value: this.list.array[index],
                index: index,
                id: id
            };
        }
        return null;
    },

    removeItem: function (id) {
        /// <summary>
        /// Remove the hash item from the list.
        /// </summary>
        /// <param name="id" type="type"></param>
        /// <returns type="">
        /// Returns {  
        ///    value: this.list.array[index],
        ///    index: index,
        ///    id: id
        /// };
        /// </returns>
        var isIdEmpty = (id === undefined || id === null);
        if (isIdEmpty === false) {
            var item = this.getItemObject(id);
            if (item !== null) {
                // found
                var list = this.list,
                    ids = list.ids,
                    arr = list.array;
                ids.splice(item.index, 1);
                arr.splice(item.index, 1);
                this.list.count--;
                this.capacity = ids.length;
                return item;
            }
        }
        throw new Error("No id found to remove the element from the list.");
        return null;
    },

    isPossibleToAddNew: function () {
        /// <summary>
        /// Private : Is it possible to add items with item in the array.
        /// </summary>
        /// <returns type="">Return true/false if we can add a item by count++</returns>
        var list = this.list,
            count = list.count,
            increment = count + 1;
        return increment <= this.capacity;
    },

    getList: function () {
        /// <summary>
        /// Get this.list;
        /// </summary>
        /// <returns type="">Get this.list.</returns>
        return this.list;
    },
    getIds: function () {
        /// <summary>
        /// Get this.list;
        /// </summary>
        /// <returns type="">Get this.list.</returns>
        return this.list.ids;
    },

    getItems: function () {
        /// <summary>
        /// Get this.list;
        /// </summary>
        /// <returns type="">Get this.list.</returns>
        return this.list.array;
    },
    count: function () {
        /// <summary>
        /// 
        /// </summary>
        /// <returns type="">Get this.list.count</returns>
        return this.list.count;
    }

};
; $.app = $.app || {};
; $.app.schema = $.app.schema || {};
;$.app.schema.url = {
    Create: null,
    Edit: null,
    Delete: null,
    Index:null
};
/// <reference path="devOrg.js" />
/// <reference path="initialize.js" />
/// <reference path="jQueryExtend.js" />
/// <reference path="jsonCombo.js" />
/// <reference path="regularExp.js" />
/// <reference path="selectors.js" />
/// <reference path="upload.js" />
/// <reference path="urls.js" />
/// <reference path="country-phone.js" />
/// <reference path="constants.js" />
/// <reference path="byId.js" />
/// <reference path="../jQuery/jquery-2.1.4.js" />
/// <reference path="../jQuery/jquery-2.1.4-vsdoc.js" />
/// <reference path="schema/hashset.js" />
;
$.jQueryCaching = {
    hashset: null,
    /**
     * 
     * @param {} capacity  : default is 350
     * @returns {} 
     */
    initialize: function (capacity, force) {
        var hashset = $.app.schema.hashset;

        if (!capacity) {
            capacity = 350;
        }
        var self = $.jQueryCaching;
        if (self.hashset === null || force === true) {
            self.hashset = hashset.create(capacity);
        }
    }
}

$.findCached = function (selector, force) {
    /// <summary>
    /// get jquery searched items, if exist in the 
    /// </summary>
    /// <param name="selector" type="type"></param>
    var self = $.jQueryCaching;
    var $e;

    // this below code will run from app.setup function please check
    //if ($.jQueryCaching.hashset === null) {
    //    $.jQueryCaching.initialize(350, force);
    //}

    if (force === true) {
        $e = $(selector);
        self.hashset.addUnique(selector, $e, true);
        return $e;
    } else {
        var item = self.hashset.getItemObject(selector);
        if (item === null) {
            $e = $(selector);
            self.hashset.addUnique(selector, $e, true);
            return $e;
        }
        return item.value;
    }
}
$.findCachedId = function (id, force) {
    /// <summary>
    /// get jquery searched items, if exist in the 
    /// </summary>
    /// <param name="selector" type="type"></param>
    var self = $.jQueryCaching;
    var $e;


    // this below code will run from app.setup function please check
    //if ($.jQueryCaching.hashset === null) {
    //    $.jQueryCaching.initialize(350, force);
    //}

    if (force === true) {
        $e = $.byId(id);
        self.hashset.addUnique(id, $e, true);
        return $e;
    } else {
        var item = self.hashset.getItemObject(id);
        if (item === null) {
            $e = $.byId(id);
            self.hashset.addUnique(id, $e, true);
            return $e;
        }
        return item.value;
    }
}

$.jsonSearch = function (jsonArray, fieldName, fieldValueLookingfor) {
    
    for (var i = 0; i < jsonArray.length; i++) {
        var item = jsonArray[i];
        if (item[fieldName] === fieldValueLookingfor) {
            return item;
        }
    }

    return null;
}
/*
 * jQuery blockUI plugin
 * Version 2.70.0-2014.11.23
 * Requires jQuery v1.7 or later
 *
 * Examples at: http://malsup.com/jquery/block/
 * Copyright (c) 2007-2013 M. Alsup
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 * Thanks to Amir-Hossein Sobhi for some excellent contributions!
 */

;(function() {
/*jshint eqeqeq:false curly:false latedef:false */
"use strict";

	function setup($) {
		$.fn._fadeIn = $.fn.fadeIn;

		var noOp = $.noop || function() {};

		// this bit is to ensure we don't call setExpression when we shouldn't (with extra muscle to handle
		// confusing userAgent strings on Vista)
		var msie = /MSIE/.test(navigator.userAgent);
		var ie6  = /MSIE 6.0/.test(navigator.userAgent) && ! /MSIE 8.0/.test(navigator.userAgent);
		var mode = document.documentMode || 0;
		var setExpr = $.isFunction( document.createElement('div').style.setExpression );

		// global $ methods for blocking/unblocking the entire page
		$.blockUI   = function(opts) { install(window, opts); };
		$.unblockUI = function(opts) { remove(window, opts); };

		// convenience method for quick growl-like notifications  (http://www.google.com/search?q=growl)
		$.growlUI = function(title, message, timeout, onClose) {
			var $m = $('<div class="growlUI"></div>');
			if (title) $m.append('<h1>'+title+'</h1>');
			if (message) $m.append('<h2>'+message+'</h2>');
			if (timeout === undefined) timeout = 3000;

			// Added by konapun: Set timeout to 30 seconds if this growl is moused over, like normal toast notifications
			var callBlock = function(opts) {
				opts = opts || {};

				$.blockUI({
					message: $m,
					fadeIn : typeof opts.fadeIn  !== 'undefined' ? opts.fadeIn  : 700,
					fadeOut: typeof opts.fadeOut !== 'undefined' ? opts.fadeOut : 1000,
					timeout: typeof opts.timeout !== 'undefined' ? opts.timeout : timeout,
					centerY: false,
					showOverlay: false,
					onUnblock: onClose,
					css: $.blockUI.defaults.growlCSS
				});
			};

			callBlock();
			var nonmousedOpacity = $m.css('opacity');
			$m.mouseover(function() {
				callBlock({
					fadeIn: 0,
					timeout: 30000
				});

				var displayBlock = $('.blockMsg');
				displayBlock.stop(); // cancel fadeout if it has started
				displayBlock.fadeTo(300, 1); // make it easier to read the message by removing transparency
			}).mouseout(function() {
				$('.blockMsg').fadeOut(1000);
			});
			// End konapun additions
		};

		// plugin method for blocking element content
		$.fn.block = function(opts) {
			if ( this[0] === window ) {
				$.blockUI( opts );
				return this;
			}
			var fullOpts = $.extend({}, $.blockUI.defaults, opts || {});
			this.each(function() {
				var $el = $(this);
				if (fullOpts.ignoreIfBlocked && $el.data('blockUI.isBlocked'))
					return;
				$el.unblock({ fadeOut: 0 });
			});

			return this.each(function() {
				if ($.css(this,'position') == 'static') {
					this.style.position = 'relative';
					$(this).data('blockUI.static', true);
				}
				this.style.zoom = 1; // force 'hasLayout' in ie
				install(this, opts);
			});
		};

		// plugin method for unblocking element content
		$.fn.unblock = function(opts) {
			if ( this[0] === window ) {
				$.unblockUI( opts );
				return this;
			}
			return this.each(function() {
				remove(this, opts);
			});
		};

		$.blockUI.version = 2.70; // 2nd generation blocking at no extra cost!

		// override these in your code to change the default behavior and style
		$.blockUI.defaults = {
			// message displayed when blocking (use null for no message)
			message:  '<h1>Please wait...</h1>',

			title: null,		// title string; only used when theme == true
			draggable: true,	// only used when theme == true (requires jquery-ui.js to be loaded)

			theme: false, // set to true to use with jQuery UI themes

			// styles for the message when blocking; if you wish to disable
			// these and use an external stylesheet then do this in your code:
			// $.blockUI.defaults.css = {};
			css: {
				padding:	0,
				margin:		0,
				width:		'30%',
				top:		'40%',
				left:		'35%',
				textAlign:	'center',
				color:		'#000',
				border:		'3px solid #aaa',
				backgroundColor:'#fff',
				cursor:		'wait'
			},

			// minimal style set used when themes are used
			themedCSS: {
				width:	'30%',
				top:	'40%',
				left:	'35%'
			},

			// styles for the overlay
			overlayCSS:  {
				backgroundColor:	'#000',
				opacity:			0.6,
				cursor:				'wait'
			},

			// style to replace wait cursor before unblocking to correct issue
			// of lingering wait cursor
			cursorReset: 'default',

			// styles applied when using $.growlUI
			growlCSS: {
				width:		'350px',
				top:		'10px',
				left:		'',
				right:		'10px',
				border:		'none',
				padding:	'5px',
				opacity:	0.6,
				cursor:		'default',
				color:		'#fff',
				backgroundColor: '#000',
				'-webkit-border-radius':'10px',
				'-moz-border-radius':	'10px',
				'border-radius':		'10px'
			},

			// IE issues: 'about:blank' fails on HTTPS and javascript:false is s-l-o-w
			// (hat tip to Jorge H. N. de Vasconcelos)
			/*jshint scripturl:true */
			iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank',

			// force usage of iframe in non-IE browsers (handy for blocking applets)
			forceIframe: false,

			// z-index for the blocking overlay
			baseZ: 1000,

			// set these to true to have the message automatically centered
			centerX: true, // <-- only effects element blocking (page block controlled via css above)
			centerY: true,

			// allow body element to be stetched in ie6; this makes blocking look better
			// on "short" pages.  disable if you wish to prevent changes to the body height
			allowBodyStretch: true,

			// enable if you want key and mouse events to be disabled for content that is blocked
			bindEvents: true,

			// be default blockUI will supress tab navigation from leaving blocking content
			// (if bindEvents is true)
			constrainTabKey: true,

			// fadeIn time in millis; set to 0 to disable fadeIn on block
			fadeIn:  200,

			// fadeOut time in millis; set to 0 to disable fadeOut on unblock
			fadeOut:  400,

			// time in millis to wait before auto-unblocking; set to 0 to disable auto-unblock
			timeout: 0,

			// disable if you don't want to show the overlay
			showOverlay: true,

			// if true, focus will be placed in the first available input field when
			// page blocking
			focusInput: true,

            // elements that can receive focus
            focusableElements: ':input:enabled:visible',

			// suppresses the use of overlay styles on FF/Linux (due to performance issues with opacity)
			// no longer needed in 2012
			// applyPlatformOpacityRules: true,

			// callback method invoked when fadeIn has completed and blocking message is visible
			onBlock: null,

			// callback method invoked when unblocking has completed; the callback is
			// passed the element that has been unblocked (which is the window object for page
			// blocks) and the options that were passed to the unblock call:
			//	onUnblock(element, options)
			onUnblock: null,

			// callback method invoked when the overlay area is clicked.
			// setting this will turn the cursor to a pointer, otherwise cursor defined in overlayCss will be used.
			onOverlayClick: null,

			// don't ask; if you really must know: http://groups.google.com/group/jquery-en/browse_thread/thread/36640a8730503595/2f6a79a77a78e493#2f6a79a77a78e493
			quirksmodeOffsetHack: 4,

			// class name of the message block
			blockMsgClass: 'blockMsg',

			// if it is already blocked, then ignore it (don't unblock and reblock)
			ignoreIfBlocked: false
		};

		// private data and functions follow...

		var pageBlock = null;
		var pageBlockEls = [];

		function install(el, opts) {
			var css, themedCSS;
			var full = (el == window);
			var msg = (opts && opts.message !== undefined ? opts.message : undefined);
			opts = $.extend({}, $.blockUI.defaults, opts || {});

			if (opts.ignoreIfBlocked && $(el).data('blockUI.isBlocked'))
				return;

			opts.overlayCSS = $.extend({}, $.blockUI.defaults.overlayCSS, opts.overlayCSS || {});
			css = $.extend({}, $.blockUI.defaults.css, opts.css || {});
			if (opts.onOverlayClick)
				opts.overlayCSS.cursor = 'pointer';

			themedCSS = $.extend({}, $.blockUI.defaults.themedCSS, opts.themedCSS || {});
			msg = msg === undefined ? opts.message : msg;

			// remove the current block (if there is one)
			if (full && pageBlock)
				remove(window, {fadeOut:0});

			// if an existing element is being used as the blocking content then we capture
			// its current place in the DOM (and current display style) so we can restore
			// it when we unblock
			if (msg && typeof msg != 'string' && (msg.parentNode || msg.jquery)) {
				var node = msg.jquery ? msg[0] : msg;
				var data = {};
				$(el).data('blockUI.history', data);
				data.el = node;
				data.parent = node.parentNode;
				data.display = node.style.display;
				data.position = node.style.position;
				if (data.parent)
					data.parent.removeChild(node);
			}

			$(el).data('blockUI.onUnblock', opts.onUnblock);
			var z = opts.baseZ;

			// blockUI uses 3 layers for blocking, for simplicity they are all used on every platform;
			// layer1 is the iframe layer which is used to supress bleed through of underlying content
			// layer2 is the overlay layer which has opacity and a wait cursor (by default)
			// layer3 is the message content that is displayed while blocking
			var lyr1, lyr2, lyr3, s;
			if (msie || opts.forceIframe)
				lyr1 = $('<iframe class="blockUI" style="z-index:'+ (z++) +';display:none;border:none;margin:0;padding:0;position:absolute;width:100%;height:100%;top:0;left:0" src="'+opts.iframeSrc+'"></iframe>');
			else
				lyr1 = $('<div class="blockUI" style="display:none"></div>');

			if (opts.theme)
				lyr2 = $('<div class="blockUI blockOverlay ui-widget-overlay" style="z-index:'+ (z++) +';display:none"></div>');
			else
				lyr2 = $('<div class="blockUI blockOverlay" style="z-index:'+ (z++) +';display:none;border:none;margin:0;padding:0;width:100%;height:100%;top:0;left:0"></div>');

			if (opts.theme && full) {
				s = '<div class="blockUI ' + opts.blockMsgClass + ' blockPage ui-dialog ui-widget ui-corner-all" style="z-index:'+(z+10)+';display:none;position:fixed">';
				if ( opts.title ) {
					s += '<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">'+(opts.title || '&nbsp;')+'</div>';
				}
				s += '<div class="ui-widget-content ui-dialog-content"></div>';
				s += '</div>';
			}
			else if (opts.theme) {
				s = '<div class="blockUI ' + opts.blockMsgClass + ' blockElement ui-dialog ui-widget ui-corner-all" style="z-index:'+(z+10)+';display:none;position:absolute">';
				if ( opts.title ) {
					s += '<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">'+(opts.title || '&nbsp;')+'</div>';
				}
				s += '<div class="ui-widget-content ui-dialog-content"></div>';
				s += '</div>';
			}
			else if (full) {
				s = '<div class="blockUI ' + opts.blockMsgClass + ' blockPage" style="z-index:'+(z+10)+';display:none;position:fixed"></div>';
			}
			else {
				s = '<div class="blockUI ' + opts.blockMsgClass + ' blockElement" style="z-index:'+(z+10)+';display:none;position:absolute"></div>';
			}
			lyr3 = $(s);

			// if we have a message, style it
			if (msg) {
				if (opts.theme) {
					lyr3.css(themedCSS);
					lyr3.addClass('ui-widget-content');
				}
				else
					lyr3.css(css);
			}

			// style the overlay
			if (!opts.theme /*&& (!opts.applyPlatformOpacityRules)*/)
				lyr2.css(opts.overlayCSS);
			lyr2.css('position', full ? 'fixed' : 'absolute');

			// make iframe layer transparent in IE
			if (msie || opts.forceIframe)
				lyr1.css('opacity',0.0);

			//$([lyr1[0],lyr2[0],lyr3[0]]).appendTo(full ? 'body' : el);
			var layers = [lyr1,lyr2,lyr3], $par = full ? $('body') : $(el);
			$.each(layers, function() {
				this.appendTo($par);
			});

			if (opts.theme && opts.draggable && $.fn.draggable) {
				lyr3.draggable({
					handle: '.ui-dialog-titlebar',
					cancel: 'li'
				});
			}

			// ie7 must use absolute positioning in quirks mode and to account for activex issues (when scrolling)
			var expr = setExpr && (!$.support.boxModel || $('object,embed', full ? null : el).length > 0);
			if (ie6 || expr) {
				// give body 100% height
				if (full && opts.allowBodyStretch && $.support.boxModel)
					$('html,body').css('height','100%');

				// fix ie6 issue when blocked element has a border width
				if ((ie6 || !$.support.boxModel) && !full) {
					var t = sz(el,'borderTopWidth'), l = sz(el,'borderLeftWidth');
					var fixT = t ? '(0 - '+t+')' : 0;
					var fixL = l ? '(0 - '+l+')' : 0;
				}

				// simulate fixed position
				$.each(layers, function(i,o) {
					var s = o[0].style;
					s.position = 'absolute';
					if (i < 2) {
						if (full)
							s.setExpression('height','Math.max(document.body.scrollHeight, document.body.offsetHeight) - (jQuery.support.boxModel?0:'+opts.quirksmodeOffsetHack+') + "px"');
						else
							s.setExpression('height','this.parentNode.offsetHeight + "px"');
						if (full)
							s.setExpression('width','jQuery.support.boxModel && document.documentElement.clientWidth || document.body.clientWidth + "px"');
						else
							s.setExpression('width','this.parentNode.offsetWidth + "px"');
						if (fixL) s.setExpression('left', fixL);
						if (fixT) s.setExpression('top', fixT);
					}
					else if (opts.centerY) {
						if (full) s.setExpression('top','(document.documentElement.clientHeight || document.body.clientHeight) / 2 - (this.offsetHeight / 2) + (blah = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + "px"');
						s.marginTop = 0;
					}
					else if (!opts.centerY && full) {
						var top = (opts.css && opts.css.top) ? parseInt(opts.css.top, 10) : 0;
						var expression = '((document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + '+top+') + "px"';
						s.setExpression('top',expression);
					}
				});
			}

			// show the message
			if (msg) {
				if (opts.theme)
					lyr3.find('.ui-widget-content').append(msg);
				else
					lyr3.append(msg);
				if (msg.jquery || msg.nodeType)
					$(msg).show();
			}

			if ((msie || opts.forceIframe) && opts.showOverlay)
				lyr1.show(); // opacity is zero
			if (opts.fadeIn) {
				var cb = opts.onBlock ? opts.onBlock : noOp;
				var cb1 = (opts.showOverlay && !msg) ? cb : noOp;
				var cb2 = msg ? cb : noOp;
				if (opts.showOverlay)
					lyr2._fadeIn(opts.fadeIn, cb1);
				if (msg)
					lyr3._fadeIn(opts.fadeIn, cb2);
			}
			else {
				if (opts.showOverlay)
					lyr2.show();
				if (msg)
					lyr3.show();
				if (opts.onBlock)
					opts.onBlock.bind(lyr3)();
			}

			// bind key and mouse events
			bind(1, el, opts);

			if (full) {
				pageBlock = lyr3[0];
				pageBlockEls = $(opts.focusableElements,pageBlock);
				if (opts.focusInput)
					setTimeout(focus, 20);
			}
			else
				center(lyr3[0], opts.centerX, opts.centerY);

			if (opts.timeout) {
				// auto-unblock
				var to = setTimeout(function() {
					if (full)
						$.unblockUI(opts);
					else
						$(el).unblock(opts);
				}, opts.timeout);
				$(el).data('blockUI.timeout', to);
			}
		}

		// remove the block
		function remove(el, opts) {
			var count;
			var full = (el == window);
			var $el = $(el);
			var data = $el.data('blockUI.history');
			var to = $el.data('blockUI.timeout');
			if (to) {
				clearTimeout(to);
				$el.removeData('blockUI.timeout');
			}
			opts = $.extend({}, $.blockUI.defaults, opts || {});
			bind(0, el, opts); // unbind events

			if (opts.onUnblock === null) {
				opts.onUnblock = $el.data('blockUI.onUnblock');
				$el.removeData('blockUI.onUnblock');
			}

			var els;
			if (full) // crazy selector to handle odd field errors in ie6/7
				els = $('body').children().filter('.blockUI').add('body > .blockUI');
			else
				els = $el.find('>.blockUI');

			// fix cursor issue
			if ( opts.cursorReset ) {
				if ( els.length > 1 )
					els[1].style.cursor = opts.cursorReset;
				if ( els.length > 2 )
					els[2].style.cursor = opts.cursorReset;
			}

			if (full)
				pageBlock = pageBlockEls = null;

			if (opts.fadeOut) {
				count = els.length;
				els.stop().fadeOut(opts.fadeOut, function() {
					if ( --count === 0)
						reset(els,data,opts,el);
				});
			}
			else
				reset(els, data, opts, el);
		}

		// move blocking element back into the DOM where it started
		function reset(els,data,opts,el) {
			var $el = $(el);
			if ( $el.data('blockUI.isBlocked') )
				return;

			els.each(function(i,o) {
				// remove via DOM calls so we don't lose event handlers
				if (this.parentNode)
					this.parentNode.removeChild(this);
			});

			if (data && data.el) {
				data.el.style.display = data.display;
				data.el.style.position = data.position;
				data.el.style.cursor = 'default'; // #59
				if (data.parent)
					data.parent.appendChild(data.el);
				$el.removeData('blockUI.history');
			}

			if ($el.data('blockUI.static')) {
				$el.css('position', 'static'); // #22
			}

			if (typeof opts.onUnblock == 'function')
				opts.onUnblock(el,opts);

			// fix issue in Safari 6 where block artifacts remain until reflow
			var body = $(document.body), w = body.width(), cssW = body[0].style.width;
			body.width(w-1).width(w);
			body[0].style.width = cssW;
		}

		// bind/unbind the handler
		function bind(b, el, opts) {
			var full = el == window, $el = $(el);

			// don't bother unbinding if there is nothing to unbind
			if (!b && (full && !pageBlock || !full && !$el.data('blockUI.isBlocked')))
				return;

			$el.data('blockUI.isBlocked', b);

			// don't bind events when overlay is not in use or if bindEvents is false
			if (!full || !opts.bindEvents || (b && !opts.showOverlay))
				return;

			// bind anchors and inputs for mouse and key events
			var events = 'mousedown mouseup keydown keypress keyup touchstart touchend touchmove';
			if (b)
				$(document).bind(events, opts, handler);
			else
				$(document).unbind(events, handler);

		// former impl...
		//		var $e = $('a,:input');
		//		b ? $e.bind(events, opts, handler) : $e.unbind(events, handler);
		}

		// event handler to suppress keyboard/mouse events when blocking
		function handler(e) {
			// allow tab navigation (conditionally)
			if (e.type === 'keydown' && e.keyCode && e.keyCode == 9) {
				if (pageBlock && e.data.constrainTabKey) {
					var els = pageBlockEls;
					var fwd = !e.shiftKey && e.target === els[els.length-1];
					var back = e.shiftKey && e.target === els[0];
					if (fwd || back) {
						setTimeout(function(){focus(back);},10);
						return false;
					}
				}
			}
			var opts = e.data;
			var target = $(e.target);
			if (target.hasClass('blockOverlay') && opts.onOverlayClick)
				opts.onOverlayClick(e);

			// allow events within the message content
			if (target.parents('div.' + opts.blockMsgClass).length > 0)
				return true;

			// allow events for content that is not being blocked
			return target.parents().children().filter('div.blockUI').length === 0;
		}

		function focus(back) {
			if (!pageBlockEls)
				return;
			var e = pageBlockEls[back===true ? pageBlockEls.length-1 : 0];
			if (e)
				e.focus();
		}

		function center(el, x, y) {
			var p = el.parentNode, s = el.style;
			var l = ((p.offsetWidth - el.offsetWidth)/2) - sz(p,'borderLeftWidth');
			var t = ((p.offsetHeight - el.offsetHeight)/2) - sz(p,'borderTopWidth');
			if (x) s.left = l > 0 ? (l+'px') : '0';
			if (y) s.top  = t > 0 ? (t+'px') : '0';
		}

		function sz(el, p) {
			return parseInt($.css(el,p),10)||0;
		}

	}


	/*global define:true */
	if (typeof define === 'function' && define.amd && define.amd.jQuery) {
		define(['jquery'], setup);
	} else {
		setup(jQuery);
	}

})();

/*
 * Toastr
 * Copyright 2012-2015
 * Authors: John Papa, Hans Fjällemark, and Tim Ferrell.
 * All Rights Reserved.
 * Use, reproduction, distribution, and modification of this code is subject to the terms and
 * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php
 *
 * ARIA Support: Greta Krafsig
 *
 * Project: https://github.com/CodeSeven/toastr
 */
/* global define */
(function (define) {
    define(['jquery'], function ($) {
        return (function () {
            var $container;
            var listener;
            var toastId = 0;
            var toastType = {
                error: 'error',
                info: 'info',
                success: 'success',
                warning: 'warning'
            };

            var toastr = {
                clear: clear,
                remove: remove,
                error: error,
                getContainer: getContainer,
                info: info,
                options: {},
                subscribe: subscribe,
                success: success,
                version: '2.1.2',
                warning: warning
            };

            var previousToast;

            return toastr;

            ////////////////

            function error(message, title, optionsOverride) {
                return notify({
                    type: toastType.error,
                    iconClass: getOptions().iconClasses.error,
                    message: message,
                    optionsOverride: optionsOverride,
                    title: title
                });
            }

            function getContainer(options, create) {
                if (!options) { options = getOptions(); }
                $container = $('#' + options.containerId);
                if ($container.length) {
                    return $container;
                }
                if (create) {
                    $container = createContainer(options);
                }
                return $container;
            }

            function info(message, title, optionsOverride) {
                return notify({
                    type: toastType.info,
                    iconClass: getOptions().iconClasses.info,
                    message: message,
                    optionsOverride: optionsOverride,
                    title: title
                });
            }

            function subscribe(callback) {
                listener = callback;
            }

            function success(message, title, optionsOverride) {
                return notify({
                    type: toastType.success,
                    iconClass: getOptions().iconClasses.success,
                    message: message,
                    optionsOverride: optionsOverride,
                    title: title
                });
            }

            function warning(message, title, optionsOverride) {
                return notify({
                    type: toastType.warning,
                    iconClass: getOptions().iconClasses.warning,
                    message: message,
                    optionsOverride: optionsOverride,
                    title: title
                });
            }

            function clear($toastElement, clearOptions) {
                var options = getOptions();
                if (!$container) { getContainer(options); }
                if (!clearToast($toastElement, options, clearOptions)) {
                    clearContainer(options);
                }
            }

            function remove($toastElement) {
                var options = getOptions();
                if (!$container) { getContainer(options); }
                if ($toastElement && $(':focus', $toastElement).length === 0) {
                    removeToast($toastElement);
                    return;
                }
                if ($container.children().length) {
                    $container.remove();
                }
            }

            // internal functions

            function clearContainer (options) {
                var toastsToClear = $container.children();
                for (var i = toastsToClear.length - 1; i >= 0; i--) {
                    clearToast($(toastsToClear[i]), options);
                }
            }

            function clearToast ($toastElement, options, clearOptions) {
                var force = clearOptions && clearOptions.force ? clearOptions.force : false;
                if ($toastElement && (force || $(':focus', $toastElement).length === 0)) {
                    $toastElement[options.hideMethod]({
                        duration: options.hideDuration,
                        easing: options.hideEasing,
                        complete: function () { removeToast($toastElement); }
                    });
                    return true;
                }
                return false;
            }

            function createContainer(options) {
                $container = $('<div/>')
                    .attr('id', options.containerId)
                    .addClass(options.positionClass)
                    .attr('aria-live', 'polite')
                    .attr('role', 'alert');

                $container.appendTo($(options.target));
                return $container;
            }

            function getDefaults() {
                return {
                    tapToDismiss: true,
                    toastClass: 'toast',
                    containerId: 'toast-container',
                    debug: false,

                    showMethod: 'fadeIn', //fadeIn, slideDown, and show are built into jQuery
                    showDuration: 300,
                    showEasing: 'swing', //swing and linear are built into jQuery
                    onShown: undefined,
                    hideMethod: 'fadeOut',
                    hideDuration: 1000,
                    hideEasing: 'swing',
                    onHidden: undefined,
                    closeMethod: false,
                    closeDuration: false,
                    closeEasing: false,

                    extendedTimeOut: 1000,
                    iconClasses: {
                        error: 'toast-error',
                        info: 'toast-info',
                        success: 'toast-success',
                        warning: 'toast-warning'
                    },
                    iconClass: 'toast-info',
                    positionClass: 'toast-top-right',
                    timeOut: 5000, // Set timeOut and extendedTimeOut to 0 to make it sticky
                    titleClass: 'toast-title',
                    messageClass: 'toast-message',
                    escapeHtml: false,
                    target: 'body',
                    closeHtml: '<button type="button">&times;</button>',
                    newestOnTop: true,
                    preventDuplicates: false,
                    progressBar: false
                };
            }

            function publish(args) {
                if (!listener) { return; }
                listener(args);
            }

            function notify(map) {
                var options = getOptions();
                var iconClass = map.iconClass || options.iconClass;

                if (typeof (map.optionsOverride) !== 'undefined') {
                    options = $.extend(options, map.optionsOverride);
                    iconClass = map.optionsOverride.iconClass || iconClass;
                }

                if (shouldExit(options, map)) { return; }

                toastId++;

                $container = getContainer(options, true);

                var intervalId = null;
                var $toastElement = $('<div/>');
                var $titleElement = $('<div/>');
                var $messageElement = $('<div/>');
                var $progressElement = $('<div/>');
                var $closeElement = $(options.closeHtml);
                var progressBar = {
                    intervalId: null,
                    hideEta: null,
                    maxHideTime: null
                };
                var response = {
                    toastId: toastId,
                    state: 'visible',
                    startTime: new Date(),
                    options: options,
                    map: map
                };

                personalizeToast();

                displayToast();

                handleEvents();

                publish(response);

                if (options.debug && console) {
                    console.log(response);
                }

                return $toastElement;

                function escapeHtml(source) {
                    if (source == null)
                        source = "";

                    return new String(source)
                        .replace(/&/g, '&amp;')
                        .replace(/"/g, '&quot;')
                        .replace(/'/g, '&#39;')
                        .replace(/</g, '&lt;')
                        .replace(/>/g, '&gt;');
                }

                function personalizeToast() {
                    setIcon();
                    setTitle();
                    setMessage();
                    setCloseButton();
                    setProgressBar();
                    setSequence();
                }

                function handleEvents() {
                    $toastElement.hover(stickAround, delayedHideToast);
                    if (!options.onclick && options.tapToDismiss) {
                        $toastElement.click(hideToast);
                    }

                    if (options.closeButton && $closeElement) {
                        $closeElement.click(function (event) {
                            if (event.stopPropagation) {
                                event.stopPropagation();
                            } else if (event.cancelBubble !== undefined && event.cancelBubble !== true) {
                                event.cancelBubble = true;
                            }
                            hideToast(true);
                        });
                    }

                    if (options.onclick) {
                        $toastElement.click(function (event) {
                            options.onclick(event);
                            hideToast();
                        });
                    }
                }

                function displayToast() {
                    $toastElement.hide();

                    $toastElement[options.showMethod](
                        {duration: options.showDuration, easing: options.showEasing, complete: options.onShown}
                    );

                    if (options.timeOut > 0) {
                        intervalId = setTimeout(hideToast, options.timeOut);
                        progressBar.maxHideTime = parseFloat(options.timeOut);
                        progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;
                        if (options.progressBar) {
                            progressBar.intervalId = setInterval(updateProgress, 10);
                        }
                    }
                }

                function setIcon() {
                    if (map.iconClass) {
                        $toastElement.addClass(options.toastClass).addClass(iconClass);
                    }
                }

                function setSequence() {
                    if (options.newestOnTop) {
                        $container.prepend($toastElement);
                    } else {
                        $container.append($toastElement);
                    }
                }

                function setTitle() {
                    if (map.title) {
                        $titleElement.append(!options.escapeHtml ? map.title : escapeHtml(map.title)).addClass(options.titleClass);
                        $toastElement.append($titleElement);
                    }
                }

                function setMessage() {
                    if (map.message) {
                        $messageElement.append(!options.escapeHtml ? map.message : escapeHtml(map.message)).addClass(options.messageClass);
                        $toastElement.append($messageElement);
                    }
                }

                function setCloseButton() {
                    if (options.closeButton) {
                        $closeElement.addClass('toast-close-button').attr('role', 'button');
                        $toastElement.prepend($closeElement);
                    }
                }

                function setProgressBar() {
                    if (options.progressBar) {
                        $progressElement.addClass('toast-progress');
                        $toastElement.prepend($progressElement);
                    }
                }

                function shouldExit(options, map) {
                    if (options.preventDuplicates) {
                        if (map.message === previousToast) {
                            return true;
                        } else {
                            previousToast = map.message;
                        }
                    }
                    return false;
                }

                function hideToast(override) {
                    var method = override && options.closeMethod !== false ? options.closeMethod : options.hideMethod;
                    var duration = override && options.closeDuration !== false ?
                        options.closeDuration : options.hideDuration;
                    var easing = override && options.closeEasing !== false ? options.closeEasing : options.hideEasing;
                    if ($(':focus', $toastElement).length && !override) {
                        return;
                    }
                    clearTimeout(progressBar.intervalId);
                    return $toastElement[method]({
                        duration: duration,
                        easing: easing,
                        complete: function () {
                            removeToast($toastElement);
                            if (options.onHidden && response.state !== 'hidden') {
                                options.onHidden();
                            }
                            response.state = 'hidden';
                            response.endTime = new Date();
                            publish(response);
                        }
                    });
                }

                function delayedHideToast() {
                    if (options.timeOut > 0 || options.extendedTimeOut > 0) {
                        intervalId = setTimeout(hideToast, options.extendedTimeOut);
                        progressBar.maxHideTime = parseFloat(options.extendedTimeOut);
                        progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;
                    }
                }

                function stickAround() {
                    clearTimeout(intervalId);
                    progressBar.hideEta = 0;
                    $toastElement.stop(true, true)[options.showMethod](
                        {duration: options.showDuration, easing: options.showEasing}
                    );
                }

                function updateProgress() {
                    var percentage = ((progressBar.hideEta - (new Date().getTime())) / progressBar.maxHideTime) * 100;
                    $progressElement.width(percentage + '%');
                }
            }

            function getOptions() {
                return $.extend({}, getDefaults(), toastr.options);
            }

            function removeToast($toastElement) {
                if (!$container) { $container = getContainer(); }
                if ($toastElement.is(':visible')) {
                    return;
                }
                $toastElement.remove();
                $toastElement = null;
                if ($container.children().length === 0) {
                    $container.remove();
                    previousToast = undefined;
                }
            }

        })();
    });
}(typeof define === 'function' && define.amd ? define : function (deps, factory) {
    if (typeof module !== 'undefined' && module.exports) { //Node
        module.exports = factory(require('jquery'));
    } else {
        window.toastr = factory(window.jQuery);
    }
}));

(function() {
  var MutationObserver, Util, WeakMap, getComputedStyle, getComputedStyleRX,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Util = (function() {
    function Util() {}

    Util.prototype.extend = function(custom, defaults) {
      var key, value;
      for (key in defaults) {
        value = defaults[key];
        if (custom[key] == null) {
          custom[key] = value;
        }
      }
      return custom;
    };

    Util.prototype.isMobile = function(agent) {
      return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(agent);
    };

    Util.prototype.createEvent = function(event, bubble, cancel, detail) {
      var customEvent;
      if (bubble == null) {
        bubble = false;
      }
      if (cancel == null) {
        cancel = false;
      }
      if (detail == null) {
        detail = null;
      }
      if (document.createEvent != null) {
        customEvent = document.createEvent('CustomEvent');
        customEvent.initCustomEvent(event, bubble, cancel, detail);
      } else if (document.createEventObject != null) {
        customEvent = document.createEventObject();
        customEvent.eventType = event;
      } else {
        customEvent.eventName = event;
      }
      return customEvent;
    };

    Util.prototype.emitEvent = function(elem, event) {
      if (elem.dispatchEvent != null) {
        return elem.dispatchEvent(event);
      } else if (event in (elem != null)) {
        return elem[event]();
      } else if (("on" + event) in (elem != null)) {
        return elem["on" + event]();
      }
    };

    Util.prototype.addEvent = function(elem, event, fn) {
      if (elem.addEventListener != null) {
        return elem.addEventListener(event, fn, false);
      } else if (elem.attachEvent != null) {
        return elem.attachEvent("on" + event, fn);
      } else {
        return elem[event] = fn;
      }
    };

    Util.prototype.removeEvent = function(elem, event, fn) {
      if (elem.removeEventListener != null) {
        return elem.removeEventListener(event, fn, false);
      } else if (elem.detachEvent != null) {
        return elem.detachEvent("on" + event, fn);
      } else {
        return delete elem[event];
      }
    };

    Util.prototype.innerHeight = function() {
      if ('innerHeight' in window) {
        return window.innerHeight;
      } else {
        return document.documentElement.clientHeight;
      }
    };

    return Util;

  })();

  WeakMap = this.WeakMap || this.MozWeakMap || (WeakMap = (function() {
    function WeakMap() {
      this.keys = [];
      this.values = [];
    }

    WeakMap.prototype.get = function(key) {
      var i, item, j, len, ref;
      ref = this.keys;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        item = ref[i];
        if (item === key) {
          return this.values[i];
        }
      }
    };

    WeakMap.prototype.set = function(key, value) {
      var i, item, j, len, ref;
      ref = this.keys;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        item = ref[i];
        if (item === key) {
          this.values[i] = value;
          return;
        }
      }
      this.keys.push(key);
      return this.values.push(value);
    };

    return WeakMap;

  })());

  MutationObserver = this.MutationObserver || this.WebkitMutationObserver || this.MozMutationObserver || (MutationObserver = (function() {
    function MutationObserver() {
      if (typeof console !== "undefined" && console !== null) {
        console.warn('MutationObserver is not supported by your browser.');
      }
      if (typeof console !== "undefined" && console !== null) {
        console.warn('WOW.js cannot detect dom mutations, please call .sync() after loading new content.');
      }
    }

    MutationObserver.notSupported = true;

    MutationObserver.prototype.observe = function() {};

    return MutationObserver;

  })());

  getComputedStyle = this.getComputedStyle || function(el, pseudo) {
    this.getPropertyValue = function(prop) {
      var ref;
      if (prop === 'float') {
        prop = 'styleFloat';
      }
      if (getComputedStyleRX.test(prop)) {
        prop.replace(getComputedStyleRX, function(_, _char) {
          return _char.toUpperCase();
        });
      }
      return ((ref = el.currentStyle) != null ? ref[prop] : void 0) || null;
    };
    return this;
  };

  getComputedStyleRX = /(\-([a-z]){1})/g;

  this.WOW = (function() {
    WOW.prototype.defaults = {
      boxClass: 'wow',
      animateClass: 'animated',
      offset: 0,
      mobile: true,
      live: true,
      callback: null,
      scrollContainer: null
    };

    function WOW(options) {
      if (options == null) {
        options = {};
      }
      this.scrollCallback = bind(this.scrollCallback, this);
      this.scrollHandler = bind(this.scrollHandler, this);
      this.resetAnimation = bind(this.resetAnimation, this);
      this.start = bind(this.start, this);
      this.scrolled = true;
      this.config = this.util().extend(options, this.defaults);
      if (options.scrollContainer != null) {
        this.config.scrollContainer = document.querySelector(options.scrollContainer);
      }
      this.animationNameCache = new WeakMap();
      this.wowEvent = this.util().createEvent(this.config.boxClass);
    }

    WOW.prototype.init = function() {
      var ref;
      this.element = window.document.documentElement;
      if ((ref = document.readyState) === "interactive" || ref === "complete") {
        this.start();
      } else {
        this.util().addEvent(document, 'DOMContentLoaded', this.start);
      }
      return this.finished = [];
    };

    WOW.prototype.start = function() {
      var box, j, len, ref;
      this.stopped = false;
      this.boxes = (function() {
        var j, len, ref, results;
        ref = this.element.querySelectorAll("." + this.config.boxClass);
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          box = ref[j];
          results.push(box);
        }
        return results;
      }).call(this);
      this.all = (function() {
        var j, len, ref, results;
        ref = this.boxes;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          box = ref[j];
          results.push(box);
        }
        return results;
      }).call(this);
      if (this.boxes.length) {
        if (this.disabled()) {
          this.resetStyle();
        } else {
          ref = this.boxes;
          for (j = 0, len = ref.length; j < len; j++) {
            box = ref[j];
            this.applyStyle(box, true);
          }
        }
      }
      if (!this.disabled()) {
        this.util().addEvent(this.config.scrollContainer || window, 'scroll', this.scrollHandler);
        this.util().addEvent(window, 'resize', this.scrollHandler);
        this.interval = setInterval(this.scrollCallback, 50);
      }
      if (this.config.live) {
        return new MutationObserver((function(_this) {
          return function(records) {
            var k, len1, node, record, results;
            results = [];
            for (k = 0, len1 = records.length; k < len1; k++) {
              record = records[k];
              results.push((function() {
                var l, len2, ref1, results1;
                ref1 = record.addedNodes || [];
                results1 = [];
                for (l = 0, len2 = ref1.length; l < len2; l++) {
                  node = ref1[l];
                  results1.push(this.doSync(node));
                }
                return results1;
              }).call(_this));
            }
            return results;
          };
        })(this)).observe(document.body, {
          childList: true,
          subtree: true
        });
      }
    };

    WOW.prototype.stop = function() {
      this.stopped = true;
      this.util().removeEvent(this.config.scrollContainer || window, 'scroll', this.scrollHandler);
      this.util().removeEvent(window, 'resize', this.scrollHandler);
      if (this.interval != null) {
        return clearInterval(this.interval);
      }
    };

    WOW.prototype.sync = function(element) {
      if (MutationObserver.notSupported) {
        return this.doSync(this.element);
      }
    };

    WOW.prototype.doSync = function(element) {
      var box, j, len, ref, results;
      if (element == null) {
        element = this.element;
      }
      if (element.nodeType !== 1) {
        return;
      }
      element = element.parentNode || element;
      ref = element.querySelectorAll("." + this.config.boxClass);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        box = ref[j];
        if (indexOf.call(this.all, box) < 0) {
          this.boxes.push(box);
          this.all.push(box);
          if (this.stopped || this.disabled()) {
            this.resetStyle();
          } else {
            this.applyStyle(box, true);
          }
          results.push(this.scrolled = true);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    WOW.prototype.show = function(box) {
      this.applyStyle(box);
      box.className = box.className + " " + this.config.animateClass;
      if (this.config.callback != null) {
        this.config.callback(box);
      }
      this.util().emitEvent(box, this.wowEvent);
      this.util().addEvent(box, 'animationend', this.resetAnimation);
      this.util().addEvent(box, 'oanimationend', this.resetAnimation);
      this.util().addEvent(box, 'webkitAnimationEnd', this.resetAnimation);
      this.util().addEvent(box, 'MSAnimationEnd', this.resetAnimation);
      return box;
    };

    WOW.prototype.applyStyle = function(box, hidden) {
      var delay, duration, iteration;
      duration = box.getAttribute('data-wow-duration');
      delay = box.getAttribute('data-wow-delay');
      iteration = box.getAttribute('data-wow-iteration');
      return this.animate((function(_this) {
        return function() {
          return _this.customStyle(box, hidden, duration, delay, iteration);
        };
      })(this));
    };

    WOW.prototype.animate = (function() {
      if ('requestAnimationFrame' in window) {
        return function(callback) {
          return window.requestAnimationFrame(callback);
        };
      } else {
        return function(callback) {
          return callback();
        };
      }
    })();

    WOW.prototype.resetStyle = function() {
      var box, j, len, ref, results;
      ref = this.boxes;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        box = ref[j];
        results.push(box.style.visibility = 'visible');
      }
      return results;
    };

    WOW.prototype.resetAnimation = function(event) {
      var target;
      if (event.type.toLowerCase().indexOf('animationend') >= 0) {
        target = event.target || event.srcElement;
        return target.className = target.className.replace(this.config.animateClass, '').trim();
      }
    };

    WOW.prototype.customStyle = function(box, hidden, duration, delay, iteration) {
      if (hidden) {
        this.cacheAnimationName(box);
      }
      box.style.visibility = hidden ? 'hidden' : 'visible';
      if (duration) {
        this.vendorSet(box.style, {
          animationDuration: duration
        });
      }
      if (delay) {
        this.vendorSet(box.style, {
          animationDelay: delay
        });
      }
      if (iteration) {
        this.vendorSet(box.style, {
          animationIterationCount: iteration
        });
      }
      this.vendorSet(box.style, {
        animationName: hidden ? 'none' : this.cachedAnimationName(box)
      });
      return box;
    };

    WOW.prototype.vendors = ["moz", "webkit"];

    WOW.prototype.vendorSet = function(elem, properties) {
      var name, results, value, vendor;
      results = [];
      for (name in properties) {
        value = properties[name];
        elem["" + name] = value;
        results.push((function() {
          var j, len, ref, results1;
          ref = this.vendors;
          results1 = [];
          for (j = 0, len = ref.length; j < len; j++) {
            vendor = ref[j];
            results1.push(elem["" + vendor + (name.charAt(0).toUpperCase()) + (name.substr(1))] = value);
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    WOW.prototype.vendorCSS = function(elem, property) {
      var j, len, ref, result, style, vendor;
      style = getComputedStyle(elem);
      result = style.getPropertyCSSValue(property);
      ref = this.vendors;
      for (j = 0, len = ref.length; j < len; j++) {
        vendor = ref[j];
        result = result || style.getPropertyCSSValue("-" + vendor + "-" + property);
      }
      return result;
    };

    WOW.prototype.animationName = function(box) {
      var animationName;
      try {
        animationName = this.vendorCSS(box, 'animation-name').cssText;
      } catch (_error) {
        animationName = getComputedStyle(box).getPropertyValue('animation-name');
      }
      if (animationName === 'none') {
        return '';
      } else {
        return animationName;
      }
    };

    WOW.prototype.cacheAnimationName = function(box) {
      return this.animationNameCache.set(box, this.animationName(box));
    };

    WOW.prototype.cachedAnimationName = function(box) {
      return this.animationNameCache.get(box);
    };

    WOW.prototype.scrollHandler = function() {
      return this.scrolled = true;
    };

    WOW.prototype.scrollCallback = function() {
      var box;
      if (this.scrolled) {
        this.scrolled = false;
        this.boxes = (function() {
          var j, len, ref, results;
          ref = this.boxes;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            box = ref[j];
            if (!(box)) {
              continue;
            }
            if (this.isVisible(box)) {
              this.show(box);
              continue;
            }
            results.push(box);
          }
          return results;
        }).call(this);
        if (!(this.boxes.length || this.config.live)) {
          return this.stop();
        }
      }
    };

    WOW.prototype.offsetTop = function(element) {
      var top;
      while (element.offsetTop === void 0) {
        element = element.parentNode;
      }
      top = element.offsetTop;
      while (element = element.offsetParent) {
        top += element.offsetTop;
      }
      return top;
    };

    WOW.prototype.isVisible = function(box) {
      var bottom, offset, top, viewBottom, viewTop;
      offset = box.getAttribute('data-wow-offset') || this.config.offset;
      viewTop = (this.config.scrollContainer && this.config.scrollContainer.scrollTop) || window.pageYOffset;
      viewBottom = viewTop + Math.min(this.element.clientHeight, this.util().innerHeight()) - offset;
      top = this.offsetTop(box);
      bottom = top + box.clientHeight;
      return top <= viewBottom && bottom >= viewTop;
    };

    WOW.prototype.util = function() {
      return this._util != null ? this._util : this._util = new Util();
    };

    WOW.prototype.disabled = function() {
      return !this.config.mobile && this.util().isMobile(navigator.userAgent);
    };

    return WOW;

  })();

}).call(this);

/// <reference path="app.initialize.js" />
/// <reference path="app.js" />
/// <reference path="app.run.js" />
/// <reference path="jQueryExtend.js" />
/// <reference path="../Controllers/controllers.js" />
/// <reference path="../Controllers/initialize.js" />
/// <reference path="../Controllers/programsearch.js" />
/// <reference path="../jquery-2.1.4-vsdoc.js" />
/// <reference path="../find-byId.js" />
/// <reference path="attachInitialize.js" />
; $.app = $.app || {};
$.app.initialize = $.app.initialize || {};
$(document).ready(function () {
    $.app.initialize(); // initialize everything
});

window.onload = function () {
    var app = $.app;
    $.attachAndExecuteInitialize(app.executeAfter);
}